C51 COMPILER V9.03   CORE_INIT                                                             02/02/2015 14:30:17 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CORE_INIT
OBJECT MODULE PLACED IN Code\CORE\CORE_INIT.OBJ
COMPILER INVOKED BY: C:\Program Files\KeilC\C51\BIN\C51.exe Code\CORE\CORE_INIT.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCD
                    -IR(.\Code\CORE\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\;.\Code\API\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_INIT.C
   3           *
   4           * Author : Dino
   5           *
   6           * Copyright (c) ITE INC. All Rights Reserved.
   7           *
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          //----------------------------------------------------------------------------
  14          // FUNCTION: cold_reset - Initialization when power goes on
  15          //----------------------------------------------------------------------------
  16          void cold_reset(void)
  17          {
  18   1              Ext_Cb2.byte = EXT_CB2_INIT;                    /* Update Ext_Cb3 a little further down */   
  19   1              Save_Typematic = SAVE_TYPEMATIC_INIT;   
  20   1              Save_Kbd_State = (SAVE_KBD_STATE_INIT & ~maskLEDS) | ( 0& maskLEDS);   
  21   1      
  22   1          Led_Ctrl = LED_CTRL_INIT;
  23   1          Led_Data = 0;
  24   1          Gen_Info = 0;   /* Clear general control. */
  25   1      
  26   1          Int_Var.Ticker_10 = 10;
  27   1      
  28   1          Flag.PASS_READY = 0;    /* Password not loaded. */
  29   1          Int_Var.Ticker_100 = 50;
  30   1      
  31   1          Flag.SCAN_INH = 1;      /* Scanner transmission inhibited. */
  32   1          Flag.VALID_SCAN = 0;
  33   1      
  34   1          Flag.NEW_PRI_K = 0;
  35   1          Flag.NEW_PRI_M = 0;
  36   1      
  37   1          Flag.LED_ON = 1;
  38   1          Ccb42 = CCB42_INIT;
  39   1      
  40   1          Pass_On = 0;      /* Password enable send code. */
  41   1          Pass_Off = 0;     /* Password disable send code. */
  42   1          Pass_Make1 = 0;   /* Reject make code 1. */
  43   1          Pass_Make2 = 0;   /* Reject make code 2. */
  44   1      
  45   1          MULPX = 0;
  46   1      
  47   1      }
  48          
  49          
  50          //----------------------------------------------------------------------------
  51          // FUNCTION:   general_reset1, general_reset2
  52          // Initialize things common to both Cold/Warm reset.
  53          //----------------------------------------------------------------------------
  54          static void common_reset(void)  /* MCHT, 27/05/04 */ // static void general_reset1(void)
C51 COMPILER V9.03   CORE_INIT                                                             02/02/2015 14:30:17 PAGE 2   

  55          {
  56   1          Service  = 0;       /* Clear service requests */
  57   1          Service1 = 0;
  58   1      
  59   1          Kbd_Response = 0;   /* Clear response codes */
  60   1          Timer_A.byte = 0;   /* Clear Timer A events */
  61   1          Timer_B.byte = 0;   /* Clear Timer B events */
  62   1          Scanner_State = 0;  /* Clear scanner state */
  63   1      }
  64          
  65          
  66          //----------------------------------------------------------------------------
  67          // FUNCTION: Init_Mouse - Initialize the Intelligent mouse variables.
  68          //----------------------------------------------------------------------------
  69          void Init_Mouse (void)
  70          {
  71   1      
  72   1      }
  73          
  74          void Core_Initialization(void)
  75          {
  76   1          Init_Kbd();
  77   1              cold_reset();
  78   1              common_reset();
  79   1              Init_Mouse();
  80   1              Init_Timers();
  81   1          Core_Init_Regs();
  82   1          Core_Init_SMBus();
  83   1      
  84   1          #if !TouchPad_only
                  //
                  // delay 600 ms for scaning aux devices
                  //
                  SetPS2SkipScanTime(60);
                  #endif
  90   1      }
  91          
  92          //----------------------------------------------------------------------------
  93          // The function of clearing internal and external ram for kernel code
  94          // Clear external ram (0x000~0x0FF)
  95          // Clear internal ram (0x20~0xCF)
  96          //----------------------------------------------------------------------------
  97          void Core_Init_ClearRam(void)
  98          {
  99   1              IIBYTE *IdataIndex;
 100   1              PORT_BYTE_PNTR byte_register_pntr;
 101   1              IdataIndex = 0x20;
 102   1          byte_register_pntr=0;
 103   1          while(byte_register_pntr<0x100)// Clear external ram (0x000~0xFFF)
 104   1          {
 105   2              *byte_register_pntr=0;
 106   2              byte_register_pntr ++;
 107   2          }                                                   
 108   1              while(IdataIndex<0xC0)                  // Clear internal ram (0x20~0xBF)
 109   1          {
 110   2              *IdataIndex=0;
 111   2              IdataIndex ++;
 112   2          }
 113   1      }
 114          
 115          //----------------------------------------------------------------------------
 116          // The function of init. registers of kernel code
C51 COMPILER V9.03   CORE_INIT                                                             02/02/2015 14:30:17 PAGE 3   

 117          //----------------------------------------------------------------------------
 118          const sREG_INIT code Core_reg_init_table[] = 
 119          {
 120                          { &FMSSR                ,Core_Init_FMSSR    },  // share rom size
 121          // HOST interface
 122                  { &SPCTRL1      ,Core_Init_I2EC     },  // Enable I2EC R/W
 123                  { &BADRSEL      ,Core_Init_BADR     },  // Base address select 0b00:2E 2F 0b01:4E 4F 0b10:User define
 124                  { &SWCBALR      ,Core_Init_SWCBALR  },
 125                  { &SWCBAHR      ,Core_Init_SWCBAHR  },
 126                  { &RSTS         ,0x44               },  
 127          
 128          // KBC and PM interface
 129                          { &KBIRQR               ,0x00                   },      // Disable KBC IRQ
 130                  { &KBHICR               ,IBFCIE+PM1ICIE     },  // KBC port control IBFCIE+PMICIE
 131                  { &PM1CTL               ,IBFIE+SCINP        },  // EC port control  IBFCIE+SCI low active
 132                  { &PM2CTL               ,IBFIE+SCINP        },  // EC port2 control IBFCIE+SCI low active  
 133          // PS2
 134                  { &PSCTL1               ,PS2_InhibitMode    },  // Enable Debounce,Receive mode, Inhibit CLK
 135                  { &PSCTL2               ,PS2_InhibitMode    },  // Enable Debounce,Receive mode, Inhibit CLK
 136                  { &PSCTL3               ,PS2_InhibitMode    },  // Enable Debounce,Receive mode, Inhibit CLK
 137                  #if TouchPad_only
 138                          { &PSINT1               ,0x04                           },      // Transation Done Interrupt
 139                  { &PSINT2               ,0x04                           },      // Transation Done Interrupt 
 140                  { &PSINT3               ,0x04                           },      // Transation Done Interrupt 
 141                  #else
                              { &PSINT1               ,0x06                           },      // Transation Done,Start Clock Interrupt
                      { &PSINT2               ,0x06                           },      // Transation Done,Start Clock Interrupt 
                      { &PSINT3               ,0x06                           },      // Transation Done,Start Clock Interrupt 
                      #endif
 146          
 147          // Key Scan
 148                  { &KSOCTRL      ,KSOOD + KSOPU      },  //
 149                  { &KSICTRL      ,KSIPU                  },      //
 150          
 151          // Smbus
 152                  { &SCLKTS_A     ,0x00                   },      // Disable 1M Clk
 153                  { &SCLKTS_B     ,0x00                   },      // Disable 1M Clk
 154          
 155          // Flash
 156                  { &HINSTC2              ,0x30                           },      // Host Indirect & LPC Memory Cycle Target Slect e-Flash
 157                  
 158          };
 159          
 160          void Core_Init_Regs(void)
 161          {
 162   1              BYTE index = 0x00;
 163   1          while(index < (sizeof(Core_reg_init_table)/sizeof(sREG_INIT)))
 164   1          {
 165   2              Tmp_XPntr = Core_reg_init_table[index].address;
 166   2                      *Tmp_XPntr = Core_reg_init_table[index].initdata;
 167   2              index ++;
 168   2          }
 169   1      
 170   1          CLEAR_MASK(FLHCTRL2R,BIT3);
 171   1      }
C51 COMPILER V9.03   CORE_INIT                                                             02/02/2015 14:30:17 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION cold_reset (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 18
0000 7800        E     MOV     R0,#LOW Ext_Cb2
0002 7622              MOV     @R0,#022H
                                           ; SOURCE LINE # 19
0004 7800        E     MOV     R0,#LOW Save_Typematic
0006 762A              MOV     @R0,#02AH
                                           ; SOURCE LINE # 20
0008 7800        E     MOV     R0,#LOW Save_Kbd_State
000A 7630              MOV     @R0,#030H
                                           ; SOURCE LINE # 22
000C 75000F      E     MOV     Led_Ctrl,#0FH
                                           ; SOURCE LINE # 23
000F E4                CLR     A
0010 F500        E     MOV     Led_Data,A
                                           ; SOURCE LINE # 24
0012 F500        E     MOV     Gen_Info,A
                                           ; SOURCE LINE # 26
0014 7800        E     MOV     R0,#LOW Int_Var
0016 E6                MOV     A,@R0
0017 54C3              ANL     A,#0C3H
0019 4428              ORL     A,#028H
001B F6                MOV     @R0,A
                                           ; SOURCE LINE # 28
001C 7800        E     MOV     R0,#LOW Flag
001E E6                MOV     A,@R0
001F 54FB              ANL     A,#0FBH
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 29
0022 7800        E     MOV     R0,#LOW Int_Var+01H
0024 E6                MOV     A,@R0
0025 5401              ANL     A,#01H
0027 4464              ORL     A,#064H
0029 F6                MOV     @R0,A
                                           ; SOURCE LINE # 31
002A 7800        E     MOV     R0,#LOW Flag
002C E6                MOV     A,@R0
002D 4401              ORL     A,#01H
002F F6                MOV     @R0,A
                                           ; SOURCE LINE # 32
0030 E6                MOV     A,@R0
0031 54DF              ANL     A,#0DFH
0033 F6                MOV     @R0,A
                                           ; SOURCE LINE # 34
0034 E6                MOV     A,@R0
0035 54F7              ANL     A,#0F7H
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 35
0038 E6                MOV     A,@R0
0039 54EF              ANL     A,#0EFH
003B F6                MOV     @R0,A
                                           ; SOURCE LINE # 37
003C E6                MOV     A,@R0
003D 4440              ORL     A,#040H
003F F6                MOV     @R0,A
                                           ; SOURCE LINE # 38
0040 750010      E     MOV     Ccb42,#010H
C51 COMPILER V9.03   CORE_INIT                                                             02/02/2015 14:30:17 PAGE 5   

                                           ; SOURCE LINE # 40
0043 E4                CLR     A
0044 900000      E     MOV     DPTR,#Pass_On
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 41
0048 900000      E     MOV     DPTR,#Pass_Off
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 42
004C 900000      E     MOV     DPTR,#Pass_Make1
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 43
0050 900000      E     MOV     DPTR,#Pass_Make2
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 45
0054 F500        E     MOV     MULPX,A
                                           ; SOURCE LINE # 47
0056 22                RET     
             ; FUNCTION cold_reset (END)

             ; FUNCTION common_reset (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 E4                CLR     A
0001 F500        E     MOV     Service,A
                                           ; SOURCE LINE # 57
0003 F500        E     MOV     Service1,A
                                           ; SOURCE LINE # 59
0005 F500        E     MOV     Kbd_Response,A
                                           ; SOURCE LINE # 60
0007 F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 61
0009 F500        E     MOV     Timer_B,A
                                           ; SOURCE LINE # 62
000B F500        E     MOV     Scanner_State,A
                                           ; SOURCE LINE # 63
000D 22                RET     
             ; FUNCTION common_reset (END)

             ; FUNCTION Init_Mouse (BEGIN)
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 72
0000 22                RET     
             ; FUNCTION Init_Mouse (END)

             ; FUNCTION Core_Initialization (BEGIN)
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0000 120000      E     LCALL   Init_Kbd
                                           ; SOURCE LINE # 77
0003 120000      R     LCALL   cold_reset
                                           ; SOURCE LINE # 78
0006 120000      R     LCALL   common_reset
                                           ; SOURCE LINE # 79
0009 120000      R     LCALL   Init_Mouse
                                           ; SOURCE LINE # 80
000C 120000      E     LCALL   Init_Timers
                                           ; SOURCE LINE # 81
000F 120000      R     LCALL   Core_Init_Regs
                                           ; SOURCE LINE # 82
C51 COMPILER V9.03   CORE_INIT                                                             02/02/2015 14:30:17 PAGE 6   

0012 020000      E     LJMP    Core_Init_SMBus
             ; FUNCTION Core_Initialization (END)

             ; FUNCTION Core_Init_ClearRam (BEGIN)
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 101
;---- Variable 'IdataIndex' assigned to Register 'R7' ----
0000 7F20              MOV     R7,#020H
                                           ; SOURCE LINE # 102
;---- Variable 'byte_register_pntr' assigned to Register 'DPTR' ----
0002 900000            MOV     DPTR,#00H
0005         ?C0005:
                                           ; SOURCE LINE # 103
0005 AC83              MOV     R4,DPH
0007 C3                CLR     C
0008 EC                MOV     A,R4
0009 9401              SUBB    A,#01H
000B 5005              JNC     ?C0007
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
000F A3                INC     DPTR
                                           ; SOURCE LINE # 107
0010 80F3              SJMP    ?C0005
0012         ?C0007:
                                           ; SOURCE LINE # 108
0012 EF                MOV     A,R7
0013 C3                CLR     C
0014 94C0              SUBB    A,#0C0H
0016 5008              JNC     ?C0009
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0018 C8                XCH     A,R0
0019 EF                MOV     A,R7
001A C8                XCH     A,R0
001B E4                CLR     A
001C F6                MOV     @R0,A
                                           ; SOURCE LINE # 111
001D 0F                INC     R7
                                           ; SOURCE LINE # 112
001E 80F2              SJMP    ?C0007
                                           ; SOURCE LINE # 113
0020         ?C0009:
0020 22                RET     
             ; FUNCTION Core_Init_ClearRam (END)

             ; FUNCTION Core_Init_Regs (BEGIN)
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0010:
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0002 EF                MOV     A,R7
0003 75F003            MOV     B,#03H
C51 COMPILER V9.03   CORE_INIT                                                             02/02/2015 14:30:17 PAGE 7   

0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW Core_reg_init_table
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH Core_reg_init_table
000E F583              MOV     DPH,A
0010 E4                CLR     A
0011 93                MOVC    A,@A+DPTR
0012 FC                MOV     R4,A
0013 7401              MOV     A,#01H
0015 93                MOVC    A,@A+DPTR
0016 FD                MOV     R5,A
0017 7800        E     MOV     R0,#LOW Tmp_XPntr
0019 EC                MOV     A,R4
001A F6                MOV     @R0,A
001B 08                INC     R0
001C ED                MOV     A,R5
001D F6                MOV     @R0,A
                                           ; SOURCE LINE # 166
001E EF                MOV     A,R7
001F 75F003            MOV     B,#03H
0022 A4                MUL     AB
0023 2400        R     ADD     A,#LOW Core_reg_init_table+02H
0025 F582              MOV     DPL,A
0027 E4                CLR     A
0028 3400        R     ADDC    A,#HIGH Core_reg_init_table+02H
002A F583              MOV     DPH,A
002C E4                CLR     A
002D 93                MOVC    A,@A+DPTR
002E 8D82              MOV     DPL,R5
0030 8C83              MOV     DPH,R4
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
0033 0F                INC     R7
                                           ; SOURCE LINE # 168
0034 EF                MOV     A,R7
0035 B415CA            CJNE    A,#015H,?C0010
0038         ?C0011:
                                           ; SOURCE LINE # 170
0038 900000      E     MOV     DPTR,#FLHCTRL2R
003B E0                MOVX    A,@DPTR
003C 54F7              ANL     A,#0F7H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
003F 22                RET     
             ; FUNCTION Core_Init_Regs (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    220    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CORE_MAIN
OBJECT MODULE PLACED IN Code\CORE\CORE_MAIN.OBJ
COMPILER INVOKED BY: C:\Program Files\KeilC\C51\BIN\C51.exe Code\CORE\CORE_MAIN.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCD
                    -IR(.\Code\CORE\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\;.\Code\API\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_MAIN.C - Main Program for KBC firmware.
   3           *
   4           * Main processing loop (interrupt driven) for the keyboard controller/scanner.
   5           *
   6           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   7           *
   8           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   9           * transmit, broadcast, present, recite, release, license or otherwise exploit
  10           * any part of this publication in any form, by any means, without the prior
  11           * written permission of Insyde Software Corporation.
  12           *---------------------------------------------------------------------------*/
  13           
  14          #include <CORE_INCLUDE.H>
  15          #include <OEM_INCLUDE.H>
  16          
  17          /* ----------------------------------------------------------------------------
  18           *  FUNCTION: main - Main service loop.
  19           *
  20           *  Wait in idle state until an IRQ causes an exit from idle.  If the IRQ
  21           *  handler posted a service request (via bSERVICE) then dispatch control to
  22           *  the appropriate service handler.  Otherwise, go back to idle state.  After
  23           *  all service requests have been handled, return to idle state.
  24           * ------------------------------------------------------------------------- */
  25          void main(void)
  26          {
  27   1              DisableAllInterrupt();
  28   1              SP = 0xC0;                                      // Setting stack pointer
  29   1          ResetBANKDATA();            // init bank mechanism to code bank 0
  30   1          
  31   1              if(Hook_ECRetunrMainFuncKeepCondition()==0x33)  // Exit from follow mode or EC scatch ROM
  32   1              {
  33   2                      CLEAR_MASK(FBCFG,SSMC); // disable scatch ROM
  34   2                      _nop_();
  35   2                  MPRECF = 0x01;
  36   2                  _nop_();
  37   2                  MPRECF = 0x01;
  38   2                  _nop_(); 
  39   2                  MPRECF = 0x01;
  40   2                  _nop_();
  41   2                  MPRECF = 0x01;
  42   2                  _nop_();
  43   2                  _nop_();
  44   2              WinFlashMark = 0x00;
  45   2              //ResetBANKDATA();        // init bank mechanism to code bank 0
  46   2              Hook_ECExitFollowMode();
  47   2              Init_Timers();
  48   2                      EnableModuleInterrupt();    
  49   2              }
  50   1              else
  51   1              {
  52   2                      Core_Initialization();
  53   2                      Oem_Initialization();
  54   2              InitEnableInterrupt();
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 2   

  55   2              #ifdef UART_Debug
                      Init_UART();
                      printf("\n************************************");
                      printf("\nEC Init OK !!!");
                      printf("\n************************************");
                      #endif
  61   2              }
  62   1      
  63   1              while(1)
  64   1              {
  65   2              if(OEM_SkipMainServiceFunc()==Normal_MainService)
  66   2              {
  67   3                      main_service();
  68   3                      EnableModuleInterrupt();
  69   3                      _nop_();
  70   3                      _nop_();
  71   3                      _nop_();
  72   3                      _nop_();
  73   3      
  74   3                  #if TouchPad_only
  75   3      
  76   3                  #else
                          if(PS2CheckPendingISR()==0x00)
                          {
                              ScanAUXDeviceStep();
                          }
                          #endif
  82   3      
  83   3                  #ifdef SMBusServiceCenterFunc
                              if((Service==0x00)&&(Service1==0x00)&&(CheckSMBusNeedService()==SMBus_ClearService))
                          #else
  86   3                  if((Service==0x00)&&(Service1==0x00))
  87   3                  #endif
  88   3                      {
  89   4                              PCON=1;                 // enter idle mode
  90   4                      }
  91   3              }
  92   2              } 
  93   1      }
  94          
  95          /* ----------------------------------------------------------------------------
  96           * FUNCTION: main_service - Check for new/more service requests.
  97           *
  98           * Check for a request flag.  The check is done according to priority.  If a
  99           * request flag is set, handle the request and loop back to get the flags
 100           * again.  Do not follow through to check the next flag.  The flags are to be
 101           * checked in order.
 102           * ------------------------------------------------------------------------- */
 103          void main_service(void) 
 104          {
 105   1          #ifdef SMBusServiceCenterFunc
                  while((Service!=0x00)||(Service1!=0x00)||(CheckSMBusNeedService()==SMBus_NeedService))
                  #else
 108   1          while((Service!=0x00)||(Service1!=0x00))
 109   1          #endif
 110   1          {
 111   2              //-----------------------------------
 112   2              // Host command/data service
 113   2              //-----------------------------------
 114   2              if(F_Service_PCI)
 115   2              {
 116   3                  F_Service_PCI=0;
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 3   

 117   3                  service_pci1();
 118   3                  continue;
 119   3              }
 120   2      
 121   2              //-----------------------------------
 122   2              // Service unlock
 123   2              //-----------------------------------
 124   2              if(F_Service_UNLOCK)
 125   2              {
 126   3                  F_Service_UNLOCK=0;
 127   3                  service_unlock();
 128   3                  continue;
 129   3              }
 130   2      
 131   2              //-----------------------------------
 132   2              // Send byte from KBC
 133   2              //-----------------------------------
 134   2              if(F_Service_SEND)
 135   2              {
 136   3                  F_Service_SEND=0;
 137   3                  service_send();
 138   3                  continue;
 139   3              }
 140   2      
 141   2              //-----------------------------------
 142   2              // Send PS2 interface data      
 143   2              //-----------------------------------
 144   2              if(F_Service_Send_PS2)
 145   2              {
 146   3                  F_Service_Send_PS2=0;
 147   3                  service_PS2_data();
 148   3                  continue;
 149   3              }
 150   2      
 151   2              //-----------------------------------
 152   2              // process PS2 interface data
 153   2              //-----------------------------------
 154   2              if(F_Service_PS2)
 155   2              {
 156   3                  F_Service_PS2=0;
 157   3                  service_ps2();
 158   3                  continue;
 159   3              }
 160   2      
 161   2              //-----------------------------------
 162   2              // process SMBus interface data
 163   2              //-----------------------------------
 164   2              #ifdef SMBusServiceCenterFunc
                      ServiceSMBus();
                      #endif
 167   2      
 168   2              //-----------------------------------
 169   2              // 1 millisecond elapsed
 170   2              //-----------------------------------
 171   2              if(F_Service_MS_1)
 172   2              {
 173   3                  F_Service_MS_1=0;
 174   3                  service_1mS();
 175   3                  continue;
 176   3              }
 177   2      
 178   2              //-----------------------------------
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 4   

 179   2              // Secondary Host command/data service
 180   2              //-----------------------------------
 181   2              if(F_Service_PCI2)
 182   2              {
 183   3                  F_Service_PCI2=0;
 184   3                  service_pci2();
 185   3                  continue;
 186   3              }
 187   2      
 188   2              //-----------------------------------
 189   2              // Keyboard scanner service
 190   2              //-----------------------------------
 191   2              if(F_Service_KEY)
 192   2              {
 193   3                  F_Service_KEY=0;
 194   3                  service_scan();
 195   3                  continue;
 196   3              }
 197   2      
 198   2              //-----------------------------------
 199   2              //
 200   2              //-----------------------------------
 201   2              Hook_main_service_H();
 202   2              
 203   2              //-----------------------------------
 204   2              // Low level event
 205   2              //-----------------------------------
 206   2              if(F_Service_Low_LV)
 207   2              {
 208   3                  F_Service_Low_LV=0;
 209   3                  service_Low_LVEvent();
 210   3                  continue;
 211   3              } 
 212   2      
 213   2              //-----------------------------------
 214   2              // Third Host command/data service
 215   2              //-----------------------------------
 216   2              if(F_Service_PCI3)
 217   2              {
 218   3                  F_Service_PCI3=0;
 219   3                  service_pci3();
 220   3                  continue;
 221   3              }
 222   2      
 223   2              //-----------------------------------
 224   2              // CIR IRQ
 225   2              //-----------------------------------
 226   2              if(F_Service_CIR)
 227   2              {
 228   3                  F_Service_CIR=0;
 229   3                  service_cir();
 230   3                  continue;
 231   3              }
 232   2      
 233   2              //-----------------------------------
 234   2              // fourth command/data service
 235   2              //-----------------------------------
 236   2              if(F_Service_PCI4)
 237   2              {
 238   3                  F_Service_PCI4=0;
 239   3                  service_pci4();
 240   3                  continue;
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 5   

 241   3              }
 242   2      
 243   2              //------------------------------------
 244   2              // service_OEM_1
 245   2              //------------------------------------
 246   2              if(F_Service_OEM_1)
 247   2              {
 248   3                  F_Service_OEM_1=0;
 249   3                  service_OEM_1();
 250   3                  continue;
 251   3              }
 252   2      
 253   2              //------------------------------------
 254   2              // service_OEM_2
 255   2              //------------------------------------
 256   2              if(F_Service_OEM_2)
 257   2              {
 258   3                  F_Service_OEM_2=0;
 259   3                  service_OEM_2();
 260   3                  continue;
 261   3              }
 262   2      
 263   2              //------------------------------------
 264   2              // service_OEM_3
 265   2              //------------------------------------
 266   2              if(F_Service_OEM_3)
 267   2              {
 268   3                  F_Service_OEM_3=0;
 269   3                  service_OEM_3();
 270   3                  continue;
 271   3              }
 272   2      
 273   2              //------------------------------------
 274   2              // service_OEM_4
 275   2              //------------------------------------
 276   2              if(F_Service_OEM_4)
 277   2              {
 278   3                  F_Service_OEM_4=0;
 279   3                  service_OEM_4();
 280   3                  continue;
 281   3              }
 282   2      
 283   2              //-----------------------------------
 284   2              //
 285   2              //-----------------------------------
 286   2              Hook_main_service_L();
 287   2          }
 288   1      }
 289          
 290          static void service_Low_LVEvent(void)
 291          {
 292   1              if((KBPendingTXCount != KBPendingRXCount )||(scan.kbf_head != scan.kbf_tail))
 293   1              {
 294   2                      SetServiceSendFlag();
 295   2              }
 296   1      
 297   1          if(IS_MASK_SET(KBHISR,P_IBF))
 298   1          {
 299   2                  F_Service_PCI = 1;
 300   2          }
 301   1          
 302   1          if(IS_MASK_SET(PM1STS,P_IBF))
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 6   

 303   1          {
 304   2                  F_Service_PCI2 = 1;
 305   2          }
 306   1      }
 307          
 308          //----------------------------------------------------------------------------
 309          // FUNCTION: service_unlock
 310          // Unlock aux devices and re-enable Host interface IRQ if it is ok to do so.
 311          //----------------------------------------------------------------------------
 312          static void service_unlock(void)
 313          {
 314   1              Unlock_Scan();
 315   1      }
 316          
 317          //------------------------------------------------------------
 318          // Polling events
 319          //------------------------------------------------------------
 320          void service_1mS(void)
 321          {
 322   1              Timer1msEvent();
 323   1              Timer1msCnt++;
 324   1          if(Timer1msCnt>=10)
 325   1          {
 326   2              Timer1msCnt = 0x00;
 327   2          }
 328   1      
 329   1          if(Hook_Only_Timer1msEvent()==Only_Timer1msEvent)
 330   1          {   
 331   2              return;
 332   2          }
 333   1      
 334   1          if((Timer1msCnt%5)==0x00)
 335   1          {
 336   2                  Timer5msEvent();
 337   2                  Timer5msCnt++;
 338   2                  if ( Timer5msCnt & 1 )      // 10ms events
 339   2                  {
 340   3                  Timer10msEventA();
 341   3                  }
 342   2                  else
 343   2                  {
 344   3                          Timer10msEventB();
 345   3                  switch( Timer5msCnt )   // Share Loading Branch Control
 346   3                  {
 347   4                          case 2: Timer50msEventA();
 348   4                          break;
 349   4                          case 4: Timer50msEventB();
 350   4                          break;
 351   4                          case 6: Timer50msEventC();
 352   4                          break;
 353   4                          case 8: Timer100msCntB++;
 354   4                                  if ( Timer100msCntB & 1 )
 355   4                          {
 356   5                                  Timer100msEventA();
 357   5                          }
 358   4                          else
 359   4                          {
 360   5                                  Timer100msEventB();
 361   5                          }
 362   4                          break;
 363   4      
 364   4                          default:        
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 7   

 365   4                                          Timer5msCnt=0;
 366   4                          break;
 367   4                  }
 368   3      
 369   3                  if ( Timer5msCnt == 0x00 )
 370   3                  {                           // 50msec
 371   4                          Timer100msCnt ++;
 372   4                          if ( Timer100msCnt & 1 )
 373   4                          {
 374   5                          Timer100msEventC();
 375   5                          }
 376   4                          else
 377   4                          {                   // 100msec
 378   5                                  switch( Timer100msCnt )
 379   5                          {
 380   6                                  case 2:     Timer500msEventA();
 381   6                                          break;
 382   6                                  case 4:     Timer500msEventB();
 383   6                                  break;
 384   6                                  case 6:     Timer500msEventC();
 385   6                                  break;
 386   6                                  case 8:     Timer1SecEventA();
 387   6                                  break;
 388   6                                                  case 10:    Timer1SecEventB();
 389   6                                  break;      
 390   6                                  case 12:    Timer500msEventA();
 391   6                                  break;
 392   6                                  case 14:    Timer500msEventB();
 393   6                                  break;
 394   6                                  case 16:    Timer500msEventC();
 395   6                                  break;
 396   6                                  case 18:    Timer1SecEventC();
 397   6                                  break;
 398   6                                  default:        // 1 Sec
 399   6                                  Timer100msCnt = 0;
 400   6                                          Timer1SecCnt ++;
 401   6                                  if ( Timer1SecCnt == 60 )
 402   6                                  {
 403   7                                          Timer1MinEvent();
 404   7                                          Timer1SecCnt=0;
 405   7                                  }
 406   6                                  break;
 407   6                                  }
 408   5                      }
 409   4                      }
 410   3                      }
 411   2              } 
 412   1      }
 413          
 414          //------------------------------------------------------------
 415          // 1ms events
 416          //------------------------------------------------------------
 417          void Timer1msEvent(void)
 418          {
 419   1          ReSendPS2PendingData();
 420   1          Hook_Timer1msEvent(Timer1msCnt);
 421   1      }
 422          
 423          //------------------------------------------------------------
 424          // 5ms events
 425          //------------------------------------------------------------
 426          void Timer5msEvent(void)
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 8   

 427          {
 428   1          F_Service_Low_LV = 1;
 429   1              if (Timer_A.fbit.TMR_SCAN) 
 430   1              {
 431   2              #ifdef KB_HW_KeyScan
                      HW_KB_Check_TM();
                      #else
 434   2                      F_Service_KEY = 1;              // Request scanner service. 
 435   2                      #endif  // KB_HW_KeyScan
 436   2              }
 437   1          Hook_Timer5msEvent();
 438   1      }
 439          
 440          //------------------------------------------------------------
 441          // 10ms events
 442          //------------------------------------------------------------
 443          void Timer10msEventA(void)
 444          {
 445   1          SetStartScanAUXFlag();
 446   1              Hook_Timer10msEventA(); 
 447   1      }
 448          
 449          //------------------------------------------------------------
 450          // 10ms events
 451          //------------------------------------------------------------
 452          void Timer10msEventB(void)
 453          {
 454   1              Hook_Timer10msEventB();  
 455   1      }
 456          
 457          //------------------------------------------------------------
 458          // 50ms events A
 459          //------------------------------------------------------------
 460          void Timer50msEventA(void)
 461          {
 462   1              Hook_Timer50msEventA();
 463   1      }
 464          
 465          //------------------------------------------------------------
 466          // 50ms events B
 467          //------------------------------------------------------------
 468          void Timer50msEventB(void)
 469          {
 470   1              Hook_Timer50msEventB();
 471   1      }
 472          
 473          //------------------------------------------------------------
 474          // 50ms events C
 475          //------------------------------------------------------------
 476          void Timer50msEventC(void)
 477          {
 478   1              Hook_Timer50msEventC();
 479   1      }
 480          
 481          //------------------------------------------------------------
 482          // 100ms events A
 483          //------------------------------------------------------------
 484          void Timer100msEventA(void)
 485          {
 486   1              Hook_Timer100msEventA();
 487   1      }
 488          
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 9   

 489          //------------------------------------------------------------
 490          // 100ms events B
 491          //------------------------------------------------------------
 492          void Timer100msEventB(void)
 493          {
 494   1              Hook_Timer100msEventB();
 495   1      }
 496          
 497          //------------------------------------------------------------
 498          // 100ms events C
 499          //------------------------------------------------------------
 500          void Timer100msEventC(void)
 501          {
 502   1              Hook_Timer100msEventC();
 503   1      }
 504          
 505          //------------------------------------------------------------
 506          // 500ms events A
 507          //------------------------------------------------------------
 508          void Timer500msEventA(void)
 509          {
 510   1              Hook_Timer500msEventA();
 511   1      }
 512          
 513          //------------------------------------------------------------
 514          // 500ms events B
 515          //------------------------------------------------------------
 516          void Timer500msEventB(void)
 517          {
 518   1              Hook_Timer500msEventB();
 519   1      }
 520          
 521          //------------------------------------------------------------
 522          // 500ms events C
 523          //------------------------------------------------------------
 524          void Timer500msEventC(void)
 525          {
 526   1              Hook_Timer500msEventC();
 527   1      }
 528          
 529          //------------------------------------------------------------
 530          // 1sec events A
 531          //------------------------------------------------------------
 532          void Timer1SecEventA(void)
 533          {       
 534   1              Hook_Timer1SecEventA();
 535   1      }
 536          
 537          //------------------------------------------------------------
 538          // 1sec events B
 539          //------------------------------------------------------------
 540          void Timer1SecEventB(void)
 541          {
 542   1              Hook_Timer1SecEventB();
 543   1      }
 544          
 545          //------------------------------------------------------------
 546          // 1sec events C
 547          //------------------------------------------------------------
 548          void Timer1SecEventC(void)
 549          {
 550   1              Hook_Timer1SecEventC();
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 10  

 551   1      }
 552          
 553          //------------------------------------------------------------
 554          // 1min events
 555          //------------------------------------------------------------
 556          void Timer1MinEvent(void)
 557          {
 558   1          Hook_Timer1MinEvent();
 559   1      }
 560          
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 27
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 28
0003 7581C0            MOV     SP,#0C0H
                                           ; SOURCE LINE # 29
0006 120000      E     LCALL   ResetBANKDATA
                                           ; SOURCE LINE # 31
0009 120000      E     LCALL   Hook_ECRetunrMainFuncKeepCondition
000C EF                MOV     A,R7
000D 6433              XRL     A,#033H
000F 7029              JNZ     ?C0001
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
0011 900000      E     MOV     DPTR,#FBCFG
0014 E0                MOVX    A,@DPTR
0015 547F              ANL     A,#07FH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
0018 00                NOP     
                                           ; SOURCE LINE # 35
0019 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 36
001C 00                NOP     
                                           ; SOURCE LINE # 37
001D 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 38
0020 00                NOP     
                                           ; SOURCE LINE # 39
0021 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 40
0024 00                NOP     
                                           ; SOURCE LINE # 41
0025 75F701            MOV     MPRECF,#01H
                                           ; SOURCE LINE # 42
0028 00                NOP     
                                           ; SOURCE LINE # 43
0029 00                NOP     
                                           ; SOURCE LINE # 44
002A E4                CLR     A
002B 900000      E     MOV     DPTR,#WinFlashMark
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
002F 120000      E     LCALL   Hook_ECExitFollowMode
                                           ; SOURCE LINE # 47
0032 120000      E     LCALL   Init_Timers
                                           ; SOURCE LINE # 48
0035 120000      E     LCALL   EnableModuleInterrupt
                                           ; SOURCE LINE # 49
0038 8009              SJMP    ?C0003
003A         ?C0001:
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
003A 120000      E     LCALL   Core_Initialization
                                           ; SOURCE LINE # 53
003D 120000      E     LCALL   Oem_Initialization
                                           ; SOURCE LINE # 54
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 12  

0040 120000      E     LCALL   InitEnableInterrupt
                                           ; SOURCE LINE # 61
0043         ?C0003:
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0043 120000      E     LCALL   OEM_SkipMainServiceFunc
0046 BFFFFA            CJNE    R7,#0FFH,?C0003
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0049 120000      R     LCALL   main_service
                                           ; SOURCE LINE # 68
004C 120000      E     LCALL   EnableModuleInterrupt
                                           ; SOURCE LINE # 69
004F 00                NOP     
                                           ; SOURCE LINE # 70
0050 00                NOP     
                                           ; SOURCE LINE # 71
0051 00                NOP     
                                           ; SOURCE LINE # 72
0052 00                NOP     
                                           ; SOURCE LINE # 86
0053 E500        E     MOV     A,Service
0055 70EC              JNZ     ?C0003
0057 E500        E     MOV     A,Service1
0059 70E8              JNZ     ?C0003
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
005B 758701            MOV     PCON,#01H
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
005E 80E3              SJMP    ?C0003
             ; FUNCTION main (END)

             ; FUNCTION main_service (BEGIN)
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0000         ?C0008:
                                           ; SOURCE LINE # 108
0000 E500        E     MOV     A,Service
0002 7007              JNZ     ?C0010
0004 E500        E     MOV     A,Service1
0006 7003              JNZ     $ + 5H
0008 020000      R     LJMP    ?C0027
000B         ?C0010:
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 114
000B 300007      E     JNB     F_Service_PCI,?C0011
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
000E C200        E     CLR     F_Service_PCI
                                           ; SOURCE LINE # 117
0010 120000      E     LCALL   service_pci1
                                           ; SOURCE LINE # 118
0013 80EB              SJMP    ?C0008
                                           ; SOURCE LINE # 119
0015         ?C0011:
                                           ; SOURCE LINE # 124
0015 300007      E     JNB     F_Service_UNLOCK,?C0012
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 13  

0018 C200        E     CLR     F_Service_UNLOCK
                                           ; SOURCE LINE # 127
001A 120000      R     LCALL   service_unlock
                                           ; SOURCE LINE # 128
001D 80E1              SJMP    ?C0008
                                           ; SOURCE LINE # 129
001F         ?C0012:
                                           ; SOURCE LINE # 134
001F 300007      E     JNB     F_Service_SEND,?C0013
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0022 C200        E     CLR     F_Service_SEND
                                           ; SOURCE LINE # 137
0024 120000      E     LCALL   service_send
                                           ; SOURCE LINE # 138
0027 80D7              SJMP    ?C0008
                                           ; SOURCE LINE # 139
0029         ?C0013:
                                           ; SOURCE LINE # 144
0029 300007      E     JNB     F_Service_Send_PS2,?C0014
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
002C C200        E     CLR     F_Service_Send_PS2
                                           ; SOURCE LINE # 147
002E 120000      E     LCALL   service_PS2_data
                                           ; SOURCE LINE # 148
0031 80CD              SJMP    ?C0008
                                           ; SOURCE LINE # 149
0033         ?C0014:
                                           ; SOURCE LINE # 154
0033 300007      E     JNB     F_Service_PS2,?C0015
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0036 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 157
0038 120000      E     LCALL   service_ps2
                                           ; SOURCE LINE # 158
003B 80C3              SJMP    ?C0008
                                           ; SOURCE LINE # 159
003D         ?C0015:
                                           ; SOURCE LINE # 171
003D 300007      E     JNB     F_Service_MS_1,?C0016
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
0040 C200        E     CLR     F_Service_MS_1
                                           ; SOURCE LINE # 174
0042 120000      R     LCALL   service_1mS
                                           ; SOURCE LINE # 175
0045 80B9              SJMP    ?C0008
                                           ; SOURCE LINE # 176
0047         ?C0016:
                                           ; SOURCE LINE # 181
0047 300007      E     JNB     F_Service_PCI2,?C0017
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
004A C200        E     CLR     F_Service_PCI2
                                           ; SOURCE LINE # 184
004C 120000      E     LCALL   service_pci2
                                           ; SOURCE LINE # 185
004F 80AF              SJMP    ?C0008
                                           ; SOURCE LINE # 186
0051         ?C0017:
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 14  

                                           ; SOURCE LINE # 191
0051 300007      E     JNB     F_Service_KEY,?C0018
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0054 C200        E     CLR     F_Service_KEY
                                           ; SOURCE LINE # 194
0056 120000      E     LCALL   service_scan
                                           ; SOURCE LINE # 195
0059 80A5              SJMP    ?C0008
                                           ; SOURCE LINE # 196
005B         ?C0018:
                                           ; SOURCE LINE # 201
005B 120000      E     LCALL   Hook_main_service_H
                                           ; SOURCE LINE # 206
005E 300007      E     JNB     F_Service_Low_LV,?C0019
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
0061 C200        E     CLR     F_Service_Low_LV
                                           ; SOURCE LINE # 209
0063 120000      R     LCALL   service_Low_LVEvent
                                           ; SOURCE LINE # 210
0066 8098              SJMP    ?C0008
                                           ; SOURCE LINE # 211
0068         ?C0019:
                                           ; SOURCE LINE # 216
0068 300007      E     JNB     F_Service_PCI3,?C0020
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
006B C200        E     CLR     F_Service_PCI3
                                           ; SOURCE LINE # 219
006D 120000      E     LCALL   service_pci3
                                           ; SOURCE LINE # 220
0070 808E              SJMP    ?C0008
                                           ; SOURCE LINE # 221
0072         ?C0020:
                                           ; SOURCE LINE # 226
0072 300007      E     JNB     F_Service_CIR,?C0021
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
0075 C200        E     CLR     F_Service_CIR
                                           ; SOURCE LINE # 229
0077 120000      E     LCALL   service_cir
                                           ; SOURCE LINE # 230
007A 8084              SJMP    ?C0008
                                           ; SOURCE LINE # 231
007C         ?C0021:
                                           ; SOURCE LINE # 236
007C 300008      E     JNB     F_Service_PCI4,?C0022
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
007F C200        E     CLR     F_Service_PCI4
                                           ; SOURCE LINE # 239
0081 120000      E     LCALL   service_pci4
                                           ; SOURCE LINE # 240
0084 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 241
0087         ?C0022:
                                           ; SOURCE LINE # 246
0087 300008      E     JNB     F_Service_OEM_1,?C0023
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
008A C200        E     CLR     F_Service_OEM_1
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 15  

                                           ; SOURCE LINE # 249
008C 120000      E     LCALL   service_OEM_1
                                           ; SOURCE LINE # 250
008F 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 251
0092         ?C0023:
                                           ; SOURCE LINE # 256
0092 300008      E     JNB     F_Service_OEM_2,?C0024
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0095 C200        E     CLR     F_Service_OEM_2
                                           ; SOURCE LINE # 259
0097 120000      E     LCALL   service_OEM_2
                                           ; SOURCE LINE # 260
009A 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 261
009D         ?C0024:
                                           ; SOURCE LINE # 266
009D 300008      E     JNB     F_Service_OEM_3,?C0025
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
00A0 C200        E     CLR     F_Service_OEM_3
                                           ; SOURCE LINE # 269
00A2 120000      E     LCALL   service_OEM_3
                                           ; SOURCE LINE # 270
00A5 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 271
00A8         ?C0025:
                                           ; SOURCE LINE # 276
00A8 300008      E     JNB     F_Service_OEM_4,?C0026
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
00AB C200        E     CLR     F_Service_OEM_4
                                           ; SOURCE LINE # 279
00AD 120000      E     LCALL   service_OEM_4
                                           ; SOURCE LINE # 280
00B0 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 281
00B3         ?C0026:
                                           ; SOURCE LINE # 286
00B3 120000      E     LCALL   Hook_main_service_L
                                           ; SOURCE LINE # 287
00B6 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 288
00B9         ?C0027:
00B9 22                RET     
             ; FUNCTION main_service (END)

             ; FUNCTION service_Low_LVEvent (BEGIN)
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0000 900000      E     MOV     DPTR,#KBPendingRXCount
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      E     MOV     DPTR,#KBPendingTXCount
0008 E0                MOVX    A,@DPTR
0009 6F                XRL     A,R7
000A 700E              JNZ     ?C0029
000C AF00        E     MOV     R7,scan
000E EF                MOV     A,R7
000F C4                SWAP    A
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 16  

0010 540F              ANL     A,#0FH
0012 FF                MOV     R7,A
0013 E500        E     MOV     A,scan
0015 540F              ANL     A,#0FH
0017 6F                XRL     A,R7
0018 6003              JZ      ?C0028
001A         ?C0029:
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
001A 120000      E     LCALL   SetServiceSendFlag
                                           ; SOURCE LINE # 295
001D         ?C0028:
                                           ; SOURCE LINE # 297
001D 900000      E     MOV     DPTR,#KBHISR
0020 E0                MOVX    A,@DPTR
0021 30E102            JNB     ACC.1,?C0030
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0024 D200        E     SETB    F_Service_PCI
                                           ; SOURCE LINE # 300
0026         ?C0030:
                                           ; SOURCE LINE # 302
0026 900000      E     MOV     DPTR,#PM1STS
0029 E0                MOVX    A,@DPTR
002A 30E102            JNB     ACC.1,?C0032
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 304
002D D200        E     SETB    F_Service_PCI2
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
002F         ?C0032:
002F 22                RET     
             ; FUNCTION service_Low_LVEvent (END)

             ; FUNCTION service_unlock (BEGIN)
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0000 020000      E     LJMP    Unlock_Scan
             ; FUNCTION service_unlock (END)

             ; FUNCTION service_1mS (BEGIN)
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0000 120000      R     LCALL   Timer1msEvent
                                           ; SOURCE LINE # 323
0003 0500        E     INC     Timer1msCnt
                                           ; SOURCE LINE # 324
0005 E500        E     MOV     A,Timer1msCnt
0007 C3                CLR     C
0008 940A              SUBB    A,#0AH
000A 4003              JC      ?C0034
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
000C E4                CLR     A
000D F500        E     MOV     Timer1msCnt,A
                                           ; SOURCE LINE # 327
000F         ?C0034:
                                           ; SOURCE LINE # 329
000F 120000      E     LCALL   Hook_Only_Timer1msEvent
0012 EF                MOV     A,R7
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 17  

0013 6401              XRL     A,#01H
0015 7003              JNZ     $ + 5H
0017 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 332
001A         ?C0035:
                                           ; SOURCE LINE # 334
001A E500        E     MOV     A,Timer1msCnt
001C 75F005            MOV     B,#05H
001F 84                DIV     AB
0020 E5F0              MOV     A,B
0022 6003              JZ      $ + 5H
0024 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
0027 120000      R     LCALL   Timer5msEvent
                                           ; SOURCE LINE # 337
002A 0500        E     INC     Timer5msCnt
                                           ; SOURCE LINE # 338
002C E500        E     MOV     A,Timer5msCnt
002E 30E003            JNB     ACC.0,?C0038
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
0031 020000      R     LJMP    Timer10msEventA
                                           ; SOURCE LINE # 341
0034         ?C0038:
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0034 120000      R     LCALL   Timer10msEventB
                                           ; SOURCE LINE # 345
0037 E500        E     MOV     A,Timer5msCnt
0039 24FC              ADD     A,#0FCH
003B 6011              JZ      ?C0042
003D 24FE              ADD     A,#0FEH
003F 6012              JZ      ?C0043
0041 24FE              ADD     A,#0FEH
0043 6013              JZ      ?C0044
0045 2406              ADD     A,#06H
0047 7020              JNZ     ?C0047
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0049         ?C0041:
0049 120000      R     LCALL   Timer50msEventA
                                           ; SOURCE LINE # 348
004C 801E              SJMP    ?C0040
                                           ; SOURCE LINE # 349
004E         ?C0042:
004E 120000      R     LCALL   Timer50msEventB
                                           ; SOURCE LINE # 350
0051 8019              SJMP    ?C0040
                                           ; SOURCE LINE # 351
0053         ?C0043:
0053 120000      R     LCALL   Timer50msEventC
                                           ; SOURCE LINE # 352
0056 8014              SJMP    ?C0040
                                           ; SOURCE LINE # 353
0058         ?C0044:
0058 0500        E     INC     Timer100msCntB
                                           ; SOURCE LINE # 354
005A E500        E     MOV     A,Timer100msCntB
005C 30E005            JNB     ACC.0,?C0045
                                           ; SOURCE LINE # 355
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 18  

                                           ; SOURCE LINE # 356
005F 120000      R     LCALL   Timer100msEventA
                                           ; SOURCE LINE # 357
0062 8008              SJMP    ?C0040
0064         ?C0045:
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
0064 120000      R     LCALL   Timer100msEventB
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0067 8003              SJMP    ?C0040
                                           ; SOURCE LINE # 364
0069         ?C0047:
                                           ; SOURCE LINE # 365
0069 E4                CLR     A
006A F500        E     MOV     Timer5msCnt,A
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
006C         ?C0040:
                                           ; SOURCE LINE # 369
006C E500        E     MOV     A,Timer5msCnt
006E 7056              JNZ     ?C0036
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
0070 0500        E     INC     Timer100msCnt
                                           ; SOURCE LINE # 372
0072 E500        E     MOV     A,Timer100msCnt
0074 30E003            JNB     ACC.0,?C0049
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
0077 020000      R     LJMP    Timer100msEventC
                                           ; SOURCE LINE # 375
007A         ?C0049:
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
007A E500        E     MOV     A,Timer100msCnt
007C 120000      E     LCALL   ?C?CCASE
007F 0000        R     DW      ?C0052
0081 02                DB      02H
0082 0000        R     DW      ?C0053
0084 04                DB      04H
0085 0000        R     DW      ?C0054
0087 06                DB      06H
0088 0000        R     DW      ?C0055
008A 08                DB      08H
008B 0000        R     DW      ?C0056
008D 0A                DB      0AH
008E 0000        R     DW      ?C0057
0090 0C                DB      0CH
0091 0000        R     DW      ?C0058
0093 0E                DB      0EH
0094 0000        R     DW      ?C0054
0096 10                DB      010H
0097 0000        R     DW      ?C0060
0099 12                DB      012H
009A 0000              DW      00H
009C 0000        R     DW      ?C0061
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
009E         ?C0052:
                                           ; SOURCE LINE # 381
009E 800A              SJMP    ?C0081
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 19  

                                           ; SOURCE LINE # 382
00A0         ?C0053:
                                           ; SOURCE LINE # 383
00A0 800B              SJMP    ?C0082
                                           ; SOURCE LINE # 384
00A2         ?C0054:
                                           ; SOURCE LINE # 385
00A2 800C              SJMP    ?C0083
                                           ; SOURCE LINE # 386
00A4         ?C0055:
00A4 020000      R     LJMP    Timer1SecEventA
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
00A7         ?C0056:
00A7 020000      R     LJMP    Timer1SecEventB
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
00AA         ?C0057:
00AA         ?C0081:
00AA 020000      R     LJMP    Timer500msEventA
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
00AD         ?C0058:
00AD         ?C0082:
00AD 020000      R     LJMP    Timer500msEventB
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
00B0         ?C0083:
00B0 020000      R     LJMP    Timer500msEventC
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
00B3         ?C0060:
00B3 020000      R     LJMP    Timer1SecEventC
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
00B6         ?C0061:
                                           ; SOURCE LINE # 399
00B6 E4                CLR     A
00B7 F500        E     MOV     Timer100msCnt,A
                                           ; SOURCE LINE # 400
00B9 0500        E     INC     Timer1SecCnt
                                           ; SOURCE LINE # 401
00BB E500        E     MOV     A,Timer1SecCnt
00BD B43C06            CJNE    A,#03CH,?C0036
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
00C0 120000      R     LCALL   Timer1MinEvent
                                           ; SOURCE LINE # 404
00C3 E4                CLR     A
00C4 F500        E     MOV     Timer1SecCnt,A
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
00C6         ?C0036:
00C6 22                RET     
             ; FUNCTION service_1mS (END)

C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 20  

             ; FUNCTION Timer1msEvent (BEGIN)
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
0000 120000      E     LCALL   ReSendPS2PendingData
                                           ; SOURCE LINE # 420
0003 AF00        E     MOV     R7,Timer1msCnt
0005 020000      E     LJMP    _Hook_Timer1msEvent
             ; FUNCTION Timer1msEvent (END)

             ; FUNCTION Timer5msEvent (BEGIN)
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
0000 D200        E     SETB    F_Service_Low_LV
                                           ; SOURCE LINE # 429
0002 E500        E     MOV     A,Timer_A
0004 30E402            JNB     ACC.4,?C0064
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 434
0007 D200        E     SETB    F_Service_KEY
                                           ; SOURCE LINE # 436
0009         ?C0064:
                                           ; SOURCE LINE # 437
0009 020000      E     LJMP    Hook_Timer5msEvent
             ; FUNCTION Timer5msEvent (END)

             ; FUNCTION Timer10msEventA (BEGIN)
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0000 120000      E     LCALL   SetStartScanAUXFlag
                                           ; SOURCE LINE # 446
0003 020000      E     LJMP    Hook_Timer10msEventA
             ; FUNCTION Timer10msEventA (END)

             ; FUNCTION Timer10msEventB (BEGIN)
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
0000 020000      E     LJMP    Hook_Timer10msEventB
             ; FUNCTION Timer10msEventB (END)

             ; FUNCTION Timer50msEventA (BEGIN)
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
0000 020000      E     LJMP    Hook_Timer50msEventA
             ; FUNCTION Timer50msEventA (END)

             ; FUNCTION Timer50msEventB (BEGIN)
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
0000 020000      E     LJMP    Hook_Timer50msEventB
             ; FUNCTION Timer50msEventB (END)

             ; FUNCTION Timer50msEventC (BEGIN)
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
0000 020000      E     LJMP    Hook_Timer50msEventC
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 21  

             ; FUNCTION Timer50msEventC (END)

             ; FUNCTION Timer100msEventA (BEGIN)
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
0000 020000      E     LJMP    Hook_Timer100msEventA
             ; FUNCTION Timer100msEventA (END)

             ; FUNCTION Timer100msEventB (BEGIN)
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
0000 020000      E     LJMP    Hook_Timer100msEventB
             ; FUNCTION Timer100msEventB (END)

             ; FUNCTION Timer100msEventC (BEGIN)
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
0000 020000      E     LJMP    Hook_Timer100msEventC
             ; FUNCTION Timer100msEventC (END)

             ; FUNCTION Timer500msEventA (BEGIN)
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
0000 020000      E     LJMP    Hook_Timer500msEventA
             ; FUNCTION Timer500msEventA (END)

             ; FUNCTION Timer500msEventB (BEGIN)
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
0000 020000      E     LJMP    Hook_Timer500msEventB
             ; FUNCTION Timer500msEventB (END)

             ; FUNCTION Timer500msEventC (BEGIN)
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
0000 020000      E     LJMP    Hook_Timer500msEventC
             ; FUNCTION Timer500msEventC (END)

             ; FUNCTION Timer1SecEventA (BEGIN)
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0000 020000      E     LJMP    Hook_Timer1SecEventA
             ; FUNCTION Timer1SecEventA (END)

             ; FUNCTION Timer1SecEventB (BEGIN)
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
0000 020000      E     LJMP    Hook_Timer1SecEventB
             ; FUNCTION Timer1SecEventB (END)

             ; FUNCTION Timer1SecEventC (BEGIN)
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
C51 COMPILER V9.03   CORE_MAIN                                                             02/02/2015 14:30:11 PAGE 22  

0000 020000      E     LJMP    Hook_Timer1SecEventC
             ; FUNCTION Timer1SecEventC (END)

             ; FUNCTION Timer1MinEvent (BEGIN)
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
0000 020000      E     LJMP    Hook_Timer1MinEvent
             ; FUNCTION Timer1MinEvent (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    600    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

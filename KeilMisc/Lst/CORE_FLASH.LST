C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CORE_FLASH
OBJECT MODULE PLACED IN Code\CORE\CORE_FLASH.OBJ
COMPILER INVOKED BY: C:\Program Files\KeilC\C51\BIN\C51.exe Code\CORE\CORE_FLASH.C LA WL(1) CD OT(8,SIZE) NOAREGS OR INC
                    -DIR(.\Code\CORE\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\;.\Code\API\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_FLASH.C
   3           *
   4           * Author : Dino
   5           *
   6           * Copyright (c) ITE INC. All Rights Reserved.
   7           *
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          //-----------------------------------------------------------------------------
  14          // Always at 0xFF00 of code space
  15          //-----------------------------------------------------------------------------
  16          void RamCode(void)
  17          {
  18   1      
  19   1      }
  20          
  21          //-----------------------------------------------------------------------------
  22          // The function start address always at 0xFE00 (refer to link file)
  23          //-----------------------------------------------------------------------------
  24          void FuncAt_0xFE00(void)
  25          {
  26   1          _nop_();
  27   1          _nop_();
  28   1          _nop_();
  29   1          _nop_();
  30   1          _nop_();
  31   1          _nop_();
  32   1          _nop_();
  33   1          _nop_();
  34   1          FlashECCode();
  35   1      }
  36          
  37          //-----------------------------------------------------------------------------
  38          // The function of EC flash
  39          //-----------------------------------------------------------------------------
  40          void FlashECCode(void)
  41          {
  42   1              RamcodeCmd = 0x00;
  43   1              RamcodeSend = 0x00;
  44   1      
  45   1          PM1DO = 0x33;               // ACK
  46   1      
  47   1              while(1) 
  48   1              {       
  49   2                      if( IS_MASK_SET(KBHISR,IBF))
  50   2                      {
  51   3                              RamcodeCmd = KBHIDIR;
  52   3                              continue;
  53   3                      }
  54   2                      if( IS_MASK_CLEAR(PM1STS,P_IBF) ) continue;
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 2   

  55   2                      if( IS_MASK_CLEAR(PM1STS,P_C_D) ) continue;
  56   2                      RamcodeCmd = PM1DI;
  57   2      
  58   2                      if(RamcodeSend==1)
  59   2                      {
  60   3                              ECINDDR = RamcodeCmd;
  61   3                              RamcodeSend = 0x00;
  62   3                              continue;
  63   3                      }
  64   2      
  65   2                      if(RamcodeCmd==0x01)
  66   2                      {
  67   3                              ECINDAR3 = EC_Indirect_Selection;   // Enter follow mode
  68   3                              ECINDAR2 = 0xFF;
  69   3                              ECINDAR1 = 0xFE;
  70   3                              ECINDAR0 = 0x00;                // FFFFExx = 0xFF   
  71   3                              ECINDDR = 0x00;                 // SCE# high level
  72   3                      }
  73   2                      else if(RamcodeCmd==0x02)
  74   2                      {                                                       // Send SPI command
  75   3                              ECINDAR1 = 0xFD;
  76   3                              RamcodeSend = 1;
  77   3                      }
  78   2                      else if(RamcodeCmd==0x03)
  79   2                      {                                                       // write byte to spi
  80   3                              RamcodeSend = 1;
  81   3                      }
  82   2                      else if(RamcodeCmd==0x04)
  83   2                      {       
  84   3                              //while(IS_MASK_SET(PM1STS,P_OBF));
  85   3                              PM1DO=ECINDDR;                  // Read byte from spi                   
  86   3                      }
  87   2                      else if(RamcodeCmd==0x05)
  88   2                      {       
  89   3                              ECINDAR3 = 0x00;        //Exit follow mode
  90   3                              ECINDAR2 = 0x00;
  91   3                      }
  92   2                      else if(RamcodeCmd==0xFC)
  93   2                      {       
  94   3                              WinFlashMark = 0x33;
  95   3                              break;
  96   3                      }
  97   2                      else if(RamcodeCmd==0xFD)
  98   2                      {
  99   3                      WDTRST = 1;                             // Reset watch dog timer
 100   3                              WDTEB = 1;                              // Enable watch dog
 101   3                      while(1);                               // Wait for watch dog time-out                          
 102   3                      }
 103   2                      else if(RamcodeCmd==0xFE)
 104   2                      {       
 105   3                              BRAM[63]=0x55;
 106   3                      WDTRST = 1;                             // Reset watch dog timer
 107   3                              WDTEB = 1;                              // Enable watch dog
 108   3                      while(1);                               // Wait for watch dog time-out
 109   3                      }
 110   2              }
 111   1      
 112   1              main();
 113   1      }
 114          
 115          //-----------------------------------------------------------------------------
 116          // The function of reading SPI status ( command 0x05)
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 3   

 117          //      After this function, spi status will save to SPIReadStatus
 118          //-----------------------------------------------------------------------------
 119          void SPI_Read_Status(void)
 120          {
 121   1              ECINDAR3 = EC_Indirect_Selection; 
 122   1              ECINDAR2 = 0xFF;
 123   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 124   1      
 125   1              ECINDAR1 = 0xFE;
 126   1              ECINDDR = 0xFF;                                 // SCE# high level
 127   1              ECINDAR1 = 0xFD;
 128   1              ECINDDR = SPICmd_ReadStatus;    // Read status command
 129   1      
 130   1              SPIReadStatus = ECINDDR;                // Save status Register to SPIReadStatus
 131   1              
 132   1              ECINDAR3 = 0x00;                        //Exit follow mode
 133   1              ECINDAR2 = 0x00;
 134   1      }
 135          
 136          //-----------------------------------------------------------------------------
 137          // The function of Write SPI status ( command 0x01)
 138          //      After this function, the value of SPIWriteStatus will write to spi status
 139          //-----------------------------------------------------------------------------
 140          void SPI_Write_Status(void)
 141          {
 142   1              ECINDAR3 = EC_Indirect_Selection; 
 143   1              ECINDAR2 = 0xFF;
 144   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 145   1      
 146   1              ECINDAR1 = 0xFE;
 147   1              ECINDDR = 0xFF;                                 // SCE# high level
 148   1              ECINDAR1 = 0xFD;
 149   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 150   1              while(1)                                                // waiting spi free
 151   1              {
 152   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 153   2              {
 154   3                  break;
 155   3              } 
 156   2              }                                                               
 157   1      
 158   1              ECINDAR1 = 0xFE;
 159   1              ECINDDR = 0xFF;                                 // SCE# high level
 160   1              ECINDAR1 = 0xFD;
 161   1              ECINDDR = SPICmd_WREN;                  // Write enable 
 162   1              
 163   1          if(SPIID==SSTID)
 164   1              {
 165   2                      ECINDAR1 = 0xFE;
 166   2                      ECINDDR = 0xFF;                         // SCE# high level
 167   2                      ECINDAR1 = 0xFD;
 168   2                      ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 169   2              }    
 170   1              
 171   1              ECINDAR1 = 0xFE;
 172   1              ECINDDR = 0xFF;                                 // SCE# high level
 173   1              ECINDAR1 = 0xFD;
 174   1              ECINDDR = SPICmd_WRSR;                  // Write status command
 175   1              ECINDDR = SPIWriteStatus;               // Write SPIWriteStatus to spi status register
 176   1      
 177   1              ECINDAR1 = 0xFE;
 178   1              ECINDDR = 0xFF;                                 // SCE# high level
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 4   

 179   1              ECINDAR1 = 0xFD;
 180   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 181   1              while(1)                                                // waiting spi free
 182   1              {
 183   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 184   2              {
 185   3                  break;
 186   3              } 
 187   2              }
 188   1              
 189   1              ECINDAR3 = 0x00;                        //Exit follow mode
 190   1              ECINDAR2 = 0x00;
 191   1      }
 192          
 193          //-----------------------------------------------------------------------------
 194          // The function of reading SPI ID (command 0x9F)
 195          //      After this function, spi id will save to array SPIIDBuf[] 
 196          //-----------------------------------------------------------------------------
 197          void SPI_Read_ID(void)
 198          {
 199   1              ECINDAR3 = EC_Indirect_Selection; 
 200   1              ECINDAR2 = 0xFF;
 201   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 202   1              
 203   1              ECINDAR1 = 0xFE;
 204   1              ECINDDR = 0xFF;                                 // SCE# high level
 205   1              ECINDAR1 = 0xFD;
 206   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 207   1              while(1)                                                // waiting spi free
 208   1              {
 209   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 210   2              {
 211   3                  break;
 212   3              } 
 213   2              }                                                               
 214   1      
 215   1              ECINDAR1 = 0xFE;
 216   1              ECINDDR = 0xFF;                                 // SCE# high level
 217   1              ECINDAR1 = 0xFD;
 218   1              ECINDDR = SPICmd_DeviceID;  // Manufacture ID command
 219   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 220   1              {
 221   2                      SPIIDBuf[SPIIndex] = ECINDDR;
 222   2              }
 223   1              SPIID = SPIIDBuf[0];    
 224   1      
 225   1              ECINDAR1 = 0xFE;
 226   1              ECINDDR = 0xFF;                                 // SCE# high level
 227   1              ECINDAR1 = 0xFD;
 228   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 229   1      
 230   1              while(1)                                                // waiting spi free
 231   1              {
 232   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 233   2              {
 234   3                  break;
 235   3              } 
 236   2              }
 237   1              ECINDAR3 = 0x00;        //Exit follow mode
 238   1              ECINDAR2 = 0x00;
 239   1      }
 240          
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 5   

 241          //-----------------------------------------------------------------------------
 242          // The function of reading SPI ID (command 0xAB)
 243          //      After this function, spi id will save to array SPIIDBuf[] 
 244          //-----------------------------------------------------------------------------
 245          void SPI_Read_ID_CmdAB(void)
 246          {
 247   1              ECINDAR3 = EC_Indirect_Selection; 
 248   1              ECINDAR2 = 0xFF;
 249   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 250   1              
 251   1              ECINDAR1 = 0xFE;
 252   1              ECINDDR = 0xFF;                                 // SCE# high level
 253   1              ECINDAR1 = 0xFD;
 254   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 255   1              while(1)                                                // waiting spi free
 256   1              {
 257   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 258   2              {
 259   3                  break;
 260   3              } 
 261   2              }                                                               
 262   1      
 263   1              ECINDAR1 = 0xFE;
 264   1              ECINDDR = 0xFF;                                 // SCE# high level
 265   1              ECINDAR1 = 0xFD;
 266   1              ECINDDR = SPICmd_RDID;              // Read ID command
 267   1          ECINDDR = 0x00;                         // Read ID command addr2
 268   1          ECINDDR = 0x00;                         // Read ID command addr1
 269   1          ECINDDR = 0x00;                         // Read ID command addr0
 270   1          
 271   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 272   1              {
 273   2                      SPIIDBuf[SPIIndex] = ECINDDR; 
 274   2              }
 275   1              SPIID = SPIIDBuf[0];    
 276   1      
 277   1              ECINDAR1 = 0xFE;
 278   1              ECINDDR = 0xFF;                                 // SCE# high level
 279   1              ECINDAR1 = 0xFD;
 280   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 281   1      
 282   1              while(1)                                                // waiting spi free
 283   1              {
 284   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 285   2              {
 286   3                  break;
 287   3              } 
 288   2              }
 289   1              ECINDAR3 = 0x00;        //Exit follow mode
 290   1              ECINDAR2 = 0x00;
 291   1      }
 292          
 293          //-----------------------------------------------------------------------------
 294          // The function of Erasing SPI
 295          //-----------------------------------------------------------------------------
 296          void SPI_Erase(void)
 297          {
 298   1              ECINDAR3 = EC_Indirect_Selection; 
 299   1              ECINDAR2 = 0xFF;
 300   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 301   1              
 302   1              ECINDAR1 = 0xFE;
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 6   

 303   1              ECINDDR = 0xFF;                                 // SCE# high level
 304   1              ECINDAR1 = 0xFD;
 305   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 306   1              while(1)                                                // waiting spi free
 307   1              {
 308   2                      if((ECINDDR&(SPIStatus_BUSY+SPIStatus_WEL))==SPIStatus_WriteEnable)
 309   2              {
 310   3                  break;
 311   3              } 
 312   2              }                                                               
 313   1      
 314   1              ECINDAR1 = 0xFE;
 315   1              ECINDDR = 0xFF;                                 // SCE# high level
 316   1              ECINDAR1 = 0xFD;
 317   1              ECINDDR = SPIAEraseCmd;                 // Send erase command
 318   1              for(SPIIndex=0x00;SPIIndex<3;SPIIndex++)
 319   1              {
 320   2                      ECINDDR = SPIAddrCycle[SPIIndex];
 321   2              }                                                               // Send address cycle
 322   1      
 323   1              ECINDAR1 = 0xFE;
 324   1              ECINDDR = 0xFF;                                 // SCE# high level
 325   1      
 326   1              ECINDAR1 = 0xFD;
 327   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 328   1      
 329   1              while(1)                                                // waiting spi free
 330   1              {
 331   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 332   2              {
 333   3                  break;
 334   3              } 
 335   2              }
 336   1              ECINDAR3 = 0x00;                        //Exit follow mode
 337   1              ECINDAR2 = 0x00;
 338   1      }
 339          
 340          //-----------------------------------------------------------------------------
 341          // The function of SPI write enable
 342          //-----------------------------------------------------------------------------
 343          void SPI_Write_Enable(void)
 344          {
 345   1              ECINDAR3 = EC_Indirect_Selection; 
 346   1              ECINDAR2 = 0xFF;
 347   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 348   1              
 349   1              ECINDAR1 = 0xFE;
 350   1              ECINDDR = 0xFF;                                 // SCE# high level
 351   1              ECINDAR1 = 0xFD;
 352   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 353   1              while(1)                                                // waiting spi free
 354   1              {
 355   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 356   2              {
 357   3                  break;
 358   3              } 
 359   2              }                                                               
 360   1      
 361   1              ECINDAR1 = 0xFE;
 362   1              ECINDDR = 0xFF;                                 // SCE# high level
 363   1              ECINDAR1 = 0xFD;
 364   1              ECINDDR = SPICmd_WREN;                  // Write enable 
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 7   

 365   1              
 366   1          if(SPIID==SSTID)
 367   1          {
 368   2              ECINDAR1 = 0xFE;
 369   2              ECINDDR = 0xFF;                         // SCE# high level
 370   2              ECINDAR1 = 0xFD;
 371   2              ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 372   2          }
 373   1          
 374   1              ECINDAR1 = 0xFE;
 375   1              ECINDDR = 0xFF;                                 // SCE# high level
 376   1              ECINDAR1 = 0xFD;
 377   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 378   1              while(1)                                                // waiting spi free
 379   1              {
 380   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x02) // Check write enable and spi not busy
 381   2              {
 382   3                  break;
 383   3              } 
 384   2              }
 385   1      
 386   1              ECINDAR3 = 0x00;                        //Exit follow mode
 387   1              ECINDAR2 = 0x00;
 388   1      }
 389          
 390          //-----------------------------------------------------------------------------
 391          // The function of SPI write disable
 392          //-----------------------------------------------------------------------------
 393          void SPI_Write_Disable(void)
 394          {
 395   1              ECINDAR3 = EC_Indirect_Selection; 
 396   1              ECINDAR2 = 0xFF;
 397   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 398   1              
 399   1              ECINDAR1 = 0xFE;
 400   1              ECINDDR = 0xFF;                                 // SCE# high level
 401   1              ECINDAR1 = 0xFD;
 402   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 403   1              while(1)                                                // waiting spi free
 404   1              {
 405   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 406   2              {
 407   3                  break;
 408   3              } 
 409   2              }                                                               
 410   1      
 411   1              ECINDAR1 = 0xFE;
 412   1              ECINDDR = 0xFF;                                 // SCE# high level
 413   1              ECINDAR1 = 0xFD;
 414   1              ECINDDR = SPICmd_WRDI;                  // Write disable        
 415   1      
 416   1              ECINDAR1 = 0xFE;
 417   1              ECINDDR = 0xFF;                                 // SCE# high level
 418   1              ECINDAR1 = 0xFD;
 419   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 420   1              while(1)                                                // waiting spi free
 421   1              {
 422   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x00) // Check write disable and spi not busy
 423   2              {
 424   3                  break;
 425   3              } 
 426   2              }
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 8   

 427   1      
 428   1              ECINDAR3 = 0x00;                        //Exit follow mode
 429   1              ECINDAR2 = 0x00;
 430   1      }
 431          
 432          //-----------------------------------------------------------------------------
 433          // The function of other SPI write 256 bytes
 434          //-----------------------------------------------------------------------------
 435          void Other_SPI_Write_256Bytes(void)
 436          {
 437   1              ECINDAR3 = EC_Indirect_Selection; 
 438   1              ECINDAR2 = 0xFF;
 439   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 440   1              
 441   1              ECINDAR1 = 0xFE;
 442   1              ECINDDR = 0xFF;                                 // SCE# high level
 443   1              ECINDAR1 = 0xFD;
 444   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 445   1              while(1)                                                // waiting spi free
 446   1              {
 447   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 448   2              {
 449   3                  break;
 450   3              } 
 451   2              }                                                               
 452   1      
 453   1              ECINDAR1 = 0xFE;
 454   1              ECINDDR = 0xFF;                             // SCE# high level
 455   1              ECINDAR1 = 0xFD;
 456   1          ECINDDR = SPICmd_BYTEProgram;   // Send Program One Data Byte command
 457   1      
 458   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 459   1              ECINDDR = SPIAddrCycle[1];
 460   1              ECINDDR = SPIAddrCycle[2];
 461   1              
 462   1              SPIIndex = 0x00;
 463   1              do
 464   1              {
 465   2                      ECINDDR = *SPIDataPointer;
 466   2                      SPIIndex++;
 467   2                      SPIDataPointerLowByte++;
 468   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 469   1      
 470   1              ECINDAR1 = 0xFE;
 471   1              ECINDDR = 0xFF;                                 // SCE# high level
 472   1              ECINDAR1 = 0xFD;
 473   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 474   1              while(1)                                                // waiting spi free
 475   1              {
 476   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 477   2              {
 478   3                  break;
 479   3              } 
 480   2              }       
 481   1      
 482   1              ECINDAR3 = 0x00;                        // Exit follow mode
 483   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 484   1      }
 485          
 486          //-----------------------------------------------------------------------------
 487          // The function of SST SPI write 256 bytes (for Word AAI command)
 488          //-----------------------------------------------------------------------------
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 9   

 489          void SST_SPI_Write_256Bytes(void)
 490          {
 491   1              ECINDAR3 = EC_Indirect_Selection; 
 492   1              ECINDAR2 = 0xFF;
 493   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 494   1              
 495   1              ECINDAR1 = 0xFE;
 496   1              ECINDDR = 0xFF;                                 // SCE# high level
 497   1              ECINDAR1 = 0xFD;
 498   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 499   1              while(1)                                                // waiting spi free
 500   1              {
 501   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 502   2              {
 503   3                  break;
 504   3              } 
 505   2              }                                                               
 506   1      
 507   1              ECINDAR1 = 0xFE;
 508   1              ECINDDR = 0xFF;                             // SCE# high level
 509   1              ECINDAR1 = 0xFD;
 510   1          ECINDDR = SPICmd_AAIWordProgram;    // Auto Address Increment Programming
 511   1      
 512   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 513   1              ECINDDR = SPIAddrCycle[1];
 514   1              ECINDDR = SPIAddrCycle[2];
 515   1              
 516   1              SPIIndex = 0x00;
 517   1              do
 518   1              { 
 519   2                      ECINDDR = *SPIDataPointer;
 520   2                      SPIIndex++;
 521   2                      SPIDataPointerLowByte++;
 522   2      
 523   2                  if((SPIIndex%2)==0x00)
 524   2                  {
 525   3                          ECINDAR1 = 0xFE;
 526   3                          ECINDDR = 0xFF;                                     // SCE# high level
 527   3                          ECINDAR1 = 0xFD;
 528   3                          ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 529   3                          while(1)                                            // waiting spi free
 530   3                          {
 531   4                                  if((ECINDDR&SPIStatus_BUSY)==0x00)
 532   4                          {
 533   5                          break;
 534   5                      } 
 535   4                          }   
 536   3                      
 537   3                  if(SPIIndex!=0x00)
 538   3                  {
 539   4                              ECINDAR1 = 0xFE;
 540   4                              ECINDDR = 0xFF;                                             // SCE# high level
 541   4                              ECINDAR1 = 0xFD;
 542   4                              ECINDDR = SPICmd_AAIWordProgram;                // Auto Address Increment Programming
 543   4                  }
 544   3                  }
 545   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 546   1      
 547   1              ECINDAR1 = 0xFE;
 548   1              ECINDDR = 0xFF;                             // SCE# high level
 549   1              ECINDAR1 = 0xFD;
 550   1          ECINDDR = SPICmd_WRDI;          // Write disable
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 10  

 551   1      
 552   1          WNCKR = 0x00;                   // Delay 15.26 us
 553   1          WNCKR = 0x00;                   // Delay 15.26 us
 554   1          WNCKR = 0x00;                   // Delay 15.26 us
 555   1          WNCKR = 0x00;                   // Delay 15.26 us
 556   1      
 557   1              ECINDAR3 = 0x00;                        // Exit follow mode
 558   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 559   1      }
 560          
 561          //-----------------------------------------------------------------------------
 562          // The function of old SST SPI write 256 bytes
 563          //-----------------------------------------------------------------------------
 564          void Old_SST_SPI_Write_256Bytes(void)
 565          {
 566   1              ECINDAR3 = EC_Indirect_Selection; 
 567   1              ECINDAR2 = 0xFF;
 568   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 569   1              
 570   1              ECINDAR1 = 0xFE;
 571   1              ECINDDR = 0xFF;                                 // SCE# high level
 572   1              ECINDAR1 = 0xFD;
 573   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 574   1              while(1)                                                // waiting spi free
 575   1              {
 576   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 577   2              {
 578   3                  break;
 579   3              } 
 580   2              }                                                               
 581   1      
 582   1              ECINDAR1 = 0xFE;
 583   1              ECINDDR = 0xFF;                             // SCE# high level
 584   1              ECINDAR1 = 0xFD;
 585   1          ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 586   1      
 587   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 588   1              ECINDDR = SPIAddrCycle[1];
 589   1              ECINDDR = SPIAddrCycle[2];
 590   1              
 591   1              SPIIndex = 0x00;
 592   1              do
 593   1              {
 594   2                      ECINDDR = *SPIDataPointer;
 595   2                      SPIIndex++;
 596   2                      SPIDataPointerLowByte++;
 597   2      
 598   2                  ECINDAR1 = 0xFE;
 599   2                  ECINDDR = 0xFF;                                     // SCE# high level
 600   2                  ECINDAR1 = 0xFD;
 601   2                  ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 602   2                  while(1)                                            // waiting spi free
 603   2                  {
 604   3                          if((ECINDDR&SPIStatus_BUSY)==0x00)
 605   3                  {
 606   4                      break;
 607   4                  } 
 608   3                  }   
 609   2      
 610   2              if(SPIIndex!=0x00)
 611   2              {
 612   3                      ECINDAR1 = 0xFE;
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 11  

 613   3                      ECINDDR = 0xFF;                     // SCE# high level
 614   3                      ECINDAR1 = 0xFD;       
 615   3                  ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 616   3              }
 617   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 618   1      
 619   1              ECINDAR1 = 0xFE;
 620   1              ECINDDR = 0xFF;                             // SCE# high level
 621   1              ECINDAR1 = 0xFD;
 622   1          ECINDDR = SPICmd_WRDI;          // Write disable
 623   1      
 624   1      
 625   1          WNCKR = 0x00;                   // Delay 15.26 us
 626   1          WNCKR = 0x00;                   // Delay 15.26 us
 627   1          WNCKR = 0x00;                   // Delay 15.26 us
 628   1          WNCKR = 0x00;                   // Delay 15.26 us
 629   1              //ECINDAR1 = 0xFE;
 630   1              //ECINDDR = 0xFF;                                       // SCE# high level
 631   1              //ECINDAR1 = 0xFD;
 632   1              //ECINDDR = SPICmd_ReadStatus;  // Read Status Register
 633   1              //while(1)                                              // waiting spi free
 634   1              //{
 635   1              //      if((ECINDDR&(SPIStatus_BUSY+SSTSPIStatus_AAI))==0x00)
 636   1          //    {
 637   1          //        break;
 638   1          //    } 
 639   1              //}     
 640   1      
 641   1              ECINDAR3 = 0x00;                        // Exit follow mode
 642   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 643   1      }
 644          
 645          //-----------------------------------------------------------------------------
 646          // The function of SPI write 256 bytes
 647          //-----------------------------------------------------------------------------
 648          void SPI_Write_256Bytes(void)
 649          {
 650   1          if(SPIID==SSTID)
 651   1          {
 652   2              if(SSTDeviceID==SSTID_Old) 
 653   2              {
 654   3                  LoadSPIFucnToRam(Old_SST_SPI_Write_256Bytes);   // Load function to ram
 655   3              }
 656   2              else
 657   2              {
 658   3                      LoadSPIFucnToRam(SST_SPI_Write_256Bytes);       // Load function to ram
 659   3              }
 660   2          }
 661   1          else
 662   1          {
 663   2                  LoadSPIFucnToRam(Other_SPI_Write_256Bytes); // Load function to ram
 664   2          }  
 665   1      }
 666          
 667          
 668          //-----------------------------------------------------------------------------
 669          // The function of SPI read 256 bytes
 670          //-----------------------------------------------------------------------------
 671          void SPI_Read_256Bytes(void)
 672          {
 673   1              ECINDAR3 = EC_Indirect_Selection; 
 674   1              ECINDAR2 = 0xFF;
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 12  

 675   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 676   1              
 677   1              ECINDAR1 = 0xFE;
 678   1              ECINDDR = 0xFF;                                 // SCE# high level
 679   1              ECINDAR1 = 0xFD;
 680   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 681   1              while(1)                                                // waiting spi free
 682   1              {
 683   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 684   2              {
 685   3                  break;
 686   3              } 
 687   2              }                                                               
 688   1      
 689   1              ECINDAR1 = 0xFE;
 690   1              ECINDDR = 0xFF;                                         // SCE# high level
 691   1              ECINDAR1 = 0xFD;
 692   1              ECINDDR = SPICmd_HighSpeedRead;         // High-Speed Read
 693   1      
 694   1              ECINDDR = SPIAddrCycle[0];                      // For 256 bytes function limite
 695   1              ECINDDR = SPIAddrCycle[1];
 696   1              ECINDDR = SPIAddrCycle[2];
 697   1              ECINDDR = 0x00;                                         // dummy byte
 698   1              
 699   1              SPIIndex = 0x00;
 700   1              do
 701   1              {
 702   2                      *SPIDataPointer = ECINDDR;;
 703   2                      SPIIndex++;
 704   2                      SPIDataPointerLowByte++;
 705   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 706   1      
 707   1              ECINDAR1 = 0xFE;
 708   1              ECINDDR = 0xFF;                                 // SCE# high level
 709   1              ECINDAR1 = 0xFD;
 710   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 711   1              while(1)                                                // waiting spi free
 712   1              {
 713   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 714   2              {
 715   3                  break;
 716   3              } 
 717   2              }       
 718   1      
 719   1              ECINDAR3 = 0x00;                        // Exit follow mode
 720   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 721   1      }
 722          
 723          //-----------------------------------------------------------------------------
 724          // Eflash_Write_1Byte
 725          //-----------------------------------------------------------------------------
 726          void Eflash_Write_1Byte(void)
 727          {
 728   1          ECINDAR3 = 0x4F; 
 729   1          ECINDAR2 = 0xFF;
 730   1          ECINDAR0 = 0x00;                        // FFFFExx = 0xFF  
 731   1          ECINDAR1 = 0xFE;
 732   1          ECINDDR = 0xFF;                         // SCE# high level
 733   1          ECINDAR1 = 0xFD;
 734   1          ECINDDR = SPICmd_ReadStatus;            // Read Status Register
 735   1          while(1)                                // waiting spi free
 736   1          {
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 13  

 737   2              if((ECINDDR&SPIStatus_BUSY)==0x00)
 738   2              {
 739   3                  break;
 740   3              } 
 741   2          }                                                               
 742   1          ECINDAR1 = 0xFE;
 743   1          ECINDDR = 0xFF;                         // SCE# high level
 744   1          ECINDAR1 = 0xFD;
 745   1          ECINDDR = SPICmd_BYTEProgram;           // Send Program One Data Byte command
 746   1          ECINDDR = SPIAddrCycle[0];              // For 256 bytes function limite
 747   1          ECINDDR = SPIAddrCycle[1];
 748   1          ECINDDR = SPIAddrCycle[2];
 749   1          SPIIndex = 0x00;
 750   1          ECINDDR = SPIIDBuf[0];
 751   1          ECINDAR1 = 0xFE;
 752   1          ECINDDR = 0xFF;                         // SCE# high level
 753   1          ECINDAR1 = 0xFD;
 754   1          ECINDDR = SPICmd_ReadStatus;            // Read Status Register
 755   1          while(1)                                // waiting spi free
 756   1          {
 757   2              if((ECINDDR&SPIStatus_BUSY)==0x00)
 758   2              {
 759   3                  break;
 760   3              } 
 761   2          }       
 762   1          ECINDAR3 = 0x00;                        // Exit follow mode
 763   1          ECINDAR2 = 0x00;                           // 
 764   1      }
 765          
 766          
 767          //-----------------------------------------------------------------------------
 768          // The function of loading function to external ram 0x600 ~ 0x6FF
 769          //-----------------------------------------------------------------------------
 770          void LoadSPIFucnToRam(FUNCT_PTR_V_V funcpoint)
 771          {
 772   1              Tmp_XPntr = 0x600;
 773   1              Tmp_code_pointer = funcpoint;
 774   1      
 775   1              ITempB01 = 0x00;
 776   1              do
 777   1              {
 778   2                      *Tmp_XPntr = *Tmp_code_pointer;
 779   2              Tmp_XPntr++;
 780   2                      Tmp_code_pointer++;
 781   2                      ITempB01++;
 782   2              }while(ITempB01!=0x00);
 783   1      }
 784          
 785          //-----------------------------------------------------------------------------
 786          // The function for ITE flash utility
 787          //-----------------------------------------------------------------------------
 788          #pragma ot(7, SIZE)
 789          void ITE_Flash_Utility(void)
 790          {
 791   1              DisableAllInterrupt();                          // Disable all interrupt 
 792   1              LoadSPIFucnToRam(FlashECCode);          // Load function to ram
 793   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 794   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 795   1      }
 796          
 797          //*****************************************************************************
 798          // OEM FUNCTION CALL
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 14  

 799          //*****************************************************************************
 800          //-----------------------------------------------------------------------------
 801          // The function for oem code write spi status
 802          //-----------------------------------------------------------------------------
 803          #pragma ot(7, SIZE)
 804          void Do_SPI_Write_Status(BYTE statusvalue)
 805          {
 806   1              SPIWriteStatus = statusvalue;
 807   1              
 808   1              DisableAllInterrupt();                          // Disable all interrupt 
 809   1              LoadSPIFucnToRam(SPI_Write_Status);     // Load function to ram
 810   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 811   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 812   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 813   1              EnableAllInterrupt();                           // Enable all interrupt 
 814   1      }
 815          
 816          //-----------------------------------------------------------------------------
 817          // The function for oem code read spi status
 818          //              Note : SPI status always save to SPIReadStatus
 819          //-----------------------------------------------------------------------------
 820          #pragma ot(7, SIZE)
 821          void Do_SPI_Read_Status(void)
 822          {
 823   1              DisableAllInterrupt();                          // Disable all interrupt 
 824   1              LoadSPIFucnToRam(SPI_Read_Status);      // Load function to ram
 825   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 826   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 827   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 828   1              EnableAllInterrupt();                           // Enable all interrupt 
 829   1      }
 830          
 831          //-----------------------------------------------------------------------------
 832          // The function for oem code read spi ID (command 0x9F)   
 833          //              Note : SPI ID always save to array SPIIDBuf[]
 834          //-----------------------------------------------------------------------------
 835          #pragma ot(7, SIZE)
 836          void Do_SPI_Read_ID(void)
 837          {
 838   1              DisableAllInterrupt();                  // Disable all interrupt 
 839   1              LoadSPIFucnToRam(SPI_Read_ID);  // Load function to ram
 840   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 841   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 842   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 843   1              EnableAllInterrupt();               // Enable all interrupt 
 844   1      }
 845          
 846          //-----------------------------------------------------------------------------
 847          // The function for oem code read spi ID (command 0xAB)
 848          //              Note : SPI ID always save to array SPIIDBuf[]
 849          //-----------------------------------------------------------------------------
 850          #pragma ot(7, SIZE)
 851          void Do_SPI_Read_ID_CmdAB(void)
 852          {
 853   1              DisableAllInterrupt();                  // Disable all interrupt 
 854   1              LoadSPIFucnToRam(SPI_Read_ID_CmdAB);    // Load function to ram
 855   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 856   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 857   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 858   1              EnableAllInterrupt();               // Enable all interrupt 
 859   1      }
 860          
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 15  

 861          //-----------------------------------------------------------------------------
 862          // The function for oem code erase spi
 863          //              Input : 1 EraseCmd --> Only support SPICmd_Erase4KByte, 
 864          //                                                              SPICmd_Erase32KByte, and SPICmd_Erase64KByte.
 865          //                              2 Addr2    --> A23 ~ A16
 866          //                              3 Addr1    --> A15 ~ A8
 867          //                              4 Addr0    --> A7  ~ A0
 868          //-----------------------------------------------------------------------------
 869          #pragma ot(7, SIZE)
 870          void Do_SPI_Erase(BYTE EraseCmd, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 871          {
 872   1              SPIAEraseCmd = EraseCmd;
 873   1              SPIAddrCycle[0] = Addr2;
 874   1              SPIAddrCycle[1] = Addr1;
 875   1              SPIAddrCycle[2] = Addr0;
 876   1                              
 877   1              DisableAllInterrupt();                  // Disable all interrupt 
 878   1              LoadSPIFucnToRam(SPI_Erase);    // Load function to ram
 879   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 880   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 881   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 882   1              EnableAllInterrupt();               // Enable all interrupt 
 883   1      }
 884          
 885          //-----------------------------------------------------------------------------
 886          // The function for oem code write spi 256 bytes
 887          //              Input : 1 DataPointer --> Pointe to external memory
 888          //                              2 Addr2    --> A23 ~ A16
 889          //                              3 Addr1    --> A15 ~ A8
 890          //                              4 Addr0    --> A7  ~ A0
 891          //-----------------------------------------------------------------------------
 892          #pragma ot(7, SIZE)
 893          void Do_SPI_Write_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 894          {
 895   1              SPIDataPointer = DataPointer;
 896   1              SPIAddrCycle[0] = Addr2;
 897   1              SPIAddrCycle[1] = Addr1;
 898   1              SPIAddrCycle[2] = Addr0;
 899   1                              
 900   1              DisableAllInterrupt();                          // Disable all interrupt 
 901   1              SPI_Write_256Bytes();               // Load function to ram
 902   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 903   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 904   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 905   1              EnableAllInterrupt();                           // Enable all interrupt 
 906   1      }
 907          
 908          //-----------------------------------------------------------------------------
 909          // The function for oem code read spi 256 bytes to external memory
 910          //              Input : 1 DataPointer --> Pointe to external memory
 911          //                              2 Addr2    --> A23 ~ A16
 912          //                              3 Addr1    --> A15 ~ A8
 913          //                              4 Addr0    --> A7  ~ A0
 914          //-----------------------------------------------------------------------------
 915          #pragma ot(7, SIZE)
 916          void Do_SPI_Read_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 917          {
 918   1              SPIDataPointer = DataPointer;
 919   1              SPIAddrCycle[0] = Addr2;
 920   1              SPIAddrCycle[1] = Addr1;
 921   1              SPIAddrCycle[2] = Addr0;
 922   1                              
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 16  

 923   1              DisableAllInterrupt();                          // Disable all interrupt 
 924   1              LoadSPIFucnToRam(SPI_Read_256Bytes);    // Load function to ram
 925   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 926   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 927   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 928   1              EnableAllInterrupt();                           // Enable all interrupt 
 929   1      }
 930          
 931          //-----------------------------------------------------------------------------
 932          // The function for oem code spi write enable
 933          //-----------------------------------------------------------------------------
 934          #pragma ot(7, SIZE)
 935          void Do_SPI_Write_Enable(void)
 936          {
 937   1              DisableAllInterrupt();                          // Disable all interrupt 
 938   1              LoadSPIFucnToRam(SPI_Write_Enable);     // Load function to ram
 939   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 940   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 941   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 942   1              EnableAllInterrupt();                           // Enable all interrupt 
 943   1      }
 944          
 945          //-----------------------------------------------------------------------------
 946          // The function for oem code spi write disable
 947          //-----------------------------------------------------------------------------
 948          #pragma ot(7, SIZE)
 949          void Do_SPI_Write_Disable(void)
 950          {
 951   1              DisableAllInterrupt();                          // Disable all interrupt 
 952   1              LoadSPIFucnToRam(SPI_Write_Disable);    // Load function to ram
 953   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 954   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 955   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 956   1              EnableAllInterrupt();                           // Enable all interrupt 
 957   1      }
 958          
 959          //-----------------------------------------------------------------------------
 960          // Do_Eflash_Write_1Byte
 961          //-----------------------------------------------------------------------------
 962          #pragma ot(7, speed)
 963          void Do_Eflash_Write_1Byte(BYTE OneByte,BYTE Addr2,BYTE Addr1,BYTE Addr0)
 964          {
 965   1          SPIIDBuf[0] = OneByte;
 966   1          SPIAddrCycle[0] = Addr2;
 967   1          SPIAddrCycle[1] = Addr1;
 968   1          SPIAddrCycle[2] = Addr0;
 969   1          DisableAllInterrupt();                   // Disable all interrupt
 970   1          LoadSPIFucnToRam(SPI_Write_Enable);
 971   1          SET_MASK(FBCFG,SSMC);                    // enable scatch ROM
 972   1          FuncAt_0xFE00();                         // do function in extern ram 0x600
 973   1          CLEAR_MASK(FBCFG,SSMC);                  // disable scatch ROM
 974   1          LoadSPIFucnToRam(Eflash_Write_1Byte);    // Load function to ram
 975   1          SET_MASK(FBCFG,SSMC);                    // enable scatch ROM
 976   1          FuncAt_0xFE00();                         // do function in extern ram 0x600
 977   1          CLEAR_MASK(FBCFG,SSMC);                  // disable scatch ROM
 978   1          LoadSPIFucnToRam(SPI_Write_Disable);   // Load function to ram
 979   1          SET_MASK(FBCFG,SSMC);                    // enable scatch ROM
 980   1          FuncAt_0xFE00();                         // do function in extern ram 0x600
 981   1          CLEAR_MASK(FBCFG,SSMC);                  // disable scatch ROM
 982   1          EnableAllInterrupt();                    // Enable all interrupt 
 983   1      }
 984          
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 17  

 985          
 986          //*****************************************************************************
 987          //
 988          //
 989          //  parameter :
 990          //      add2
 991          //      add1
 992          //      add0
 993          //      selection
 994          //      length
 995          //      bufferindex
 996          //
 997          //  return :
 998          //      none
 999          //
1000          //*****************************************************************************
1001          void ECIndirectFastRead(BYTE add2, BYTE add1, BYTE add0, BYTE selection, WORD length, XBYTE *bufferindex)
1002          {
1003   1          BYTE ECINDAR3_Store;
1004   1          BYTE FLHCTRL3R_Store;
1005   1      
1006   1          ECINDAR3_Store = ECINDAR3;
1007   1          FLHCTRL3R_Store = FLHCTRL3R;
1008   1          
1009   1          if(selection==SPI_selection_internal || selection==SPI_selection_external)
1010   1          {
1011   2              if(selection==SPI_selection_internal)   // internal
1012   2              {
1013   3                  ECINDAR3 = 0x40; 
1014   3              }
1015   2              else                                    // external
1016   2              {
1017   3                  ECINDAR3 = 0x00; 
1018   3                  CLEAR_MASK(FLHCTRL3R, BIT0);
1019   3              }
1020   2      
1021   2              ECINDAR2 = add2;                        // start address
1022   2              ECINDAR1 = add1;
1023   2              ECINDAR0 = add0;
1024   2      
1025   2              while(length)
1026   2              {
1027   3                  ECINDAR2 = add2;                    // start address
1028   3                  ECINDAR1 = add1;
1029   3                  ECINDAR0 = add0;
1030   3                  *bufferindex = ECINDDR;
1031   3      
1032   3                  if(++add0 == 0x00)
1033   3                  {
1034   4                      if(++add1 == 0x00)
1035   4                      {
1036   5                          add2++;
1037   5                      }
1038   4                  }
1039   3                  bufferindex++;                      // external ram pointer ++
1040   3                  length--;
1041   3              }
1042   2      
1043   2              ECINDAR3 = ECINDAR3_Store;
1044   2              FLHCTRL3R = FLHCTRL3R_Store;
1045   2          }
1046   1      }
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 18  

1047          
1048          //*****************************************************************************
1049          // Read_Eflash_Byte
1050          //*****************************************************************************
1051          BYTE Read_Eflash_Byte(BYTE FA2,BYTE FA1,BYTE FA0)
1052          {
1053   1          ECINDAR3 = 0x40;
1054   1              ECINDAR2 = FA2;
1055   1              ECINDAR1 = FA1;
1056   1              ECINDAR0 = FA0;
1057   1              return ECINDDR;
1058   1      }
1059          
1060          //*****************************************************************************
1061          // Do_SW_Mirror
1062          //*****************************************************************************
1063          void Do_SW_Mirror()
1064          {
1065   1          FLHCTRL3R = 0x18;    // Mirror code after WDT , Enable FSPI , FSCK/FSCE#/FMISO/FMOSI are normal operat
             -ion .
1066   1          
1067   1          WDTRST = 1;          // Reset watch dog timer
1068   1          WDTEB = 1;           // Enable watch dog
1069   1          while(1);            // Wait for watch dog time-out
1070   1      
1071   1      }
1072          
1073          //*****************************************************************************
1074          //
1075          //
1076          //  parameter :
1077          //      selection : SPI_selection_internal | SPI_selection_external
1078          //
1079          //  return :
1080          //      none
1081          //
1082          //*****************************************************************************
1083          void Init_EC_Indirect_Selection(BYTE selection)
1084          {
1085   1          if(selection==SPI_selection_internal)   // Internal
1086   1          {
1087   2              EC_Indirect_Selection = 0x4F;
1088   2          }
1089   1          else                                    // external
1090   1          {
1091   2              EC_Indirect_Selection = 0x0F;
1092   2          }
1093   1      }
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 19  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION RamCode (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 19
0000 22                RET     
             ; FUNCTION RamCode (END)

             ; FUNCTION FuncAt_0xFE00 (BEGIN)
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0000 00                NOP     
                                           ; SOURCE LINE # 27
0001 00                NOP     
                                           ; SOURCE LINE # 28
0002 00                NOP     
                                           ; SOURCE LINE # 29
0003 00                NOP     
                                           ; SOURCE LINE # 30
0004 00                NOP     
                                           ; SOURCE LINE # 31
0005 00                NOP     
                                           ; SOURCE LINE # 32
0006 00                NOP     
                                           ; SOURCE LINE # 33
0007 00                NOP     
                                           ; SOURCE LINE # 34
0008 020000      R     LJMP    FlashECCode
             ; FUNCTION FuncAt_0xFE00 (END)

             ; FUNCTION FlashECCode (BEGIN)
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#RamcodeCmd
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 43
0005 900000      E     MOV     DPTR,#RamcodeSend
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 45
0009 900000      E     MOV     DPTR,#PM1DO
000C 7433              MOV     A,#033H
000E F0                MOVX    @DPTR,A
000F         ?C0003:
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
000F 900000      E     MOV     DPTR,#KBHISR
0012 E0                MOVX    A,@DPTR
0013 30E10A            JNB     ACC.1,?C0005
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0016 900000      E     MOV     DPTR,#KBHIDIR
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#RamcodeCmd
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
001E 80EF              SJMP    ?C0003
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 20  

                                           ; SOURCE LINE # 53
0020         ?C0005:
                                           ; SOURCE LINE # 54
0020 900000      E     MOV     DPTR,#PM1STS
0023 E0                MOVX    A,@DPTR
0024 30E1E8            JNB     ACC.1,?C0003
0027         ?C0006:
                                           ; SOURCE LINE # 55
0027 900000      E     MOV     DPTR,#PM1STS
002A E0                MOVX    A,@DPTR
002B 30E3E1            JNB     ACC.3,?C0003
002E         ?C0007:
                                           ; SOURCE LINE # 56
002E 900000      E     MOV     DPTR,#PM1DI
0031 E0                MOVX    A,@DPTR
0032 900000      E     MOV     DPTR,#RamcodeCmd
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 58
0036 900000      E     MOV     DPTR,#RamcodeSend
0039 E0                MOVX    A,@DPTR
003A B4010F            CJNE    A,#01H,?C0008
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
003D 900000      E     MOV     DPTR,#RamcodeCmd
0040 E0                MOVX    A,@DPTR
0041 900000      E     MOV     DPTR,#ECINDDR
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0045 E4                CLR     A
0046 900000      E     MOV     DPTR,#RamcodeSend
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
004A 80C3              SJMP    ?C0003
                                           ; SOURCE LINE # 63
004C         ?C0008:
                                           ; SOURCE LINE # 65
004C 900000      E     MOV     DPTR,#RamcodeCmd
004F E0                MOVX    A,@DPTR
0050 B4011E            CJNE    A,#01H,?C0009
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0053 900000      E     MOV     DPTR,#EC_Indirect_Selection
0056 E0                MOVX    A,@DPTR
0057 900000      E     MOV     DPTR,#ECINDAR3
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
005B 900000      E     MOV     DPTR,#ECINDAR2
005E 74FF              MOV     A,#0FFH
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0061 900000      E     MOV     DPTR,#ECINDAR1
0064 14                DEC     A
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0066 E4                CLR     A
0067 900000      E     MOV     DPTR,#ECINDAR0
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
006B 900000      E     MOV     DPTR,#ECINDDR
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
006F 809E              SJMP    ?C0003
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 21  

0071         ?C0009:
                                           ; SOURCE LINE # 73
0071 900000      E     MOV     DPTR,#RamcodeCmd
0074 E0                MOVX    A,@DPTR
0075 B40208            CJNE    A,#02H,?C0011
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0078 900000      E     MOV     DPTR,#ECINDAR1
007B 74FD              MOV     A,#0FDH
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
007E 8007              SJMP    ?C0173
0080         ?C0011:
                                           ; SOURCE LINE # 78
0080 900000      E     MOV     DPTR,#RamcodeCmd
0083 E0                MOVX    A,@DPTR
0084 B40308            CJNE    A,#03H,?C0013
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0087         ?C0173:
0087 900000      E     MOV     DPTR,#RamcodeSend
008A 7401              MOV     A,#01H
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
008D 8080              SJMP    ?C0003
008F         ?C0013:
                                           ; SOURCE LINE # 82
008F 900000      E     MOV     DPTR,#RamcodeCmd
0092 E0                MOVX    A,@DPTR
0093 B4040B            CJNE    A,#04H,?C0015
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 85
0096 900000      E     MOV     DPTR,#ECINDDR
0099 E0                MOVX    A,@DPTR
009A 900000      E     MOV     DPTR,#PM1DO
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
009E 020000      R     LJMP    ?C0003
00A1         ?C0015:
                                           ; SOURCE LINE # 87
00A1 900000      E     MOV     DPTR,#RamcodeCmd
00A4 E0                MOVX    A,@DPTR
00A5 B4050C            CJNE    A,#05H,?C0017
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
00A8 E4                CLR     A
00A9 900000      E     MOV     DPTR,#ECINDAR3
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
00B1 020000      R     LJMP    ?C0003
00B4         ?C0017:
                                           ; SOURCE LINE # 92
00B4 900000      E     MOV     DPTR,#RamcodeCmd
00B7 E0                MOVX    A,@DPTR
00B8 B4FC08            CJNE    A,#0FCH,?C0019
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
00BB 900000      E     MOV     DPTR,#WinFlashMark
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 22  

00BE 7433              MOV     A,#033H
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
00C1 8024              SJMP    ?C0004
                                           ; SOURCE LINE # 96
00C3         ?C0019:
                                           ; SOURCE LINE # 97
00C3 900000      E     MOV     DPTR,#RamcodeCmd
00C6 E0                MOVX    A,@DPTR
00C7 B4FD06            CJNE    A,#0FDH,?C0021
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
00CA D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 100
00CC D2D9              SETB    WDTEB
00CE         ?C0022:
                                           ; SOURCE LINE # 101
00CE 80FE              SJMP    ?C0022
                                           ; SOURCE LINE # 102
00D0         ?C0021:
                                           ; SOURCE LINE # 103
00D0 900000      E     MOV     DPTR,#RamcodeCmd
00D3 E0                MOVX    A,@DPTR
00D4 64FE              XRL     A,#0FEH
00D6 6003              JZ      $ + 5H
00D8 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
00DB 900000      E     MOV     DPTR,#BRAM+03FH
00DE 7455              MOV     A,#055H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
00E1 D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 107
00E3 D2D9              SETB    WDTEB
00E5         ?C0026:
                                           ; SOURCE LINE # 108
00E5 80FE              SJMP    ?C0026
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
00E7         ?C0004:
                                           ; SOURCE LINE # 112
00E7 020000      E     LJMP    main
             ; FUNCTION FlashECCode (END)

             ; FUNCTION SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 23  

0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
002A E0                MOVX    A,@DPTR
002B 900000      E     MOV     DPTR,#SPIReadStatus
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
002F E4                CLR     A
0030 900000      E     MOV     DPTR,#ECINDAR3
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
0034 900000      E     MOV     DPTR,#ECINDAR2
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0038 22                RET     
             ; FUNCTION SPI_Read_Status (END)

             ; FUNCTION SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 24  

002A         ?C0030:
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0030
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0031         ?C0031:
                                           ; SOURCE LINE # 158
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0042 900000      E     MOV     DPTR,#ECINDDR
0045 7406              MOV     A,#06H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0048 900000      E     MOV     DPTR,#SPIID
004B E0                MOVX    A,@DPTR
004C B4BF17            CJNE    A,#0BFH,?C0033
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
004F 900000      E     MOV     DPTR,#ECINDAR1
0052 74FE              MOV     A,#0FEH
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
0055 900000      E     MOV     DPTR,#ECINDDR
0058 04                INC     A
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
005A 900000      E     MOV     DPTR,#ECINDAR1
005D 74FD              MOV     A,#0FDH
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0060 900000      E     MOV     DPTR,#ECINDDR
0063 7450              MOV     A,#050H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0066         ?C0033:
                                           ; SOURCE LINE # 171
0066 900000      E     MOV     DPTR,#ECINDAR1
0069 74FE              MOV     A,#0FEH
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
006C 900000      E     MOV     DPTR,#ECINDDR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0071 900000      E     MOV     DPTR,#ECINDAR1
0074 74FD              MOV     A,#0FDH
0076 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 25  

                                           ; SOURCE LINE # 174
0077 900000      E     MOV     DPTR,#ECINDDR
007A 7401              MOV     A,#01H
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
007D 900000      E     MOV     DPTR,#SPIWriteStatus
0080 E0                MOVX    A,@DPTR
0081 900000      E     MOV     DPTR,#ECINDDR
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0085 900000      E     MOV     DPTR,#ECINDAR1
0088 74FE              MOV     A,#0FEH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
008B 900000      E     MOV     DPTR,#ECINDDR
008E 04                INC     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0090 900000      E     MOV     DPTR,#ECINDAR1
0093 74FD              MOV     A,#0FDH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0096 900000      E     MOV     DPTR,#ECINDDR
0099 7405              MOV     A,#05H
009B F0                MOVX    @DPTR,A
009C         ?C0034:
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
009C 900000      E     MOV     DPTR,#ECINDDR
009F E0                MOVX    A,@DPTR
00A0 20E0F9            JB      ACC.0,?C0034
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
00A3         ?C0035:
                                           ; SOURCE LINE # 189
00A3 E4                CLR     A
00A4 900000      E     MOV     DPTR,#ECINDAR3
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
00A8 900000      E     MOV     DPTR,#ECINDAR2
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
00AC 22                RET     
             ; FUNCTION SPI_Write_Status (END)

             ; FUNCTION SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 26  

0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0038:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0038
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0031         ?C0039:
                                           ; SOURCE LINE # 215
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0042 900000      E     MOV     DPTR,#ECINDDR
0045 749F              MOV     A,#09FH
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0048 E4                CLR     A
0049 900000      E     MOV     DPTR,#SPIIndex
004C F0                MOVX    @DPTR,A
004D         ?C0041:
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
004D 900000      E     MOV     DPTR,#ECINDDR
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 900000      E     MOV     DPTR,#SPIIndex
0055 E0                MOVX    A,@DPTR
0056 2400        E     ADD     A,#LOW SPIIDBuf
0058 F582              MOV     DPL,A
005A E4                CLR     A
005B 3400        E     ADDC    A,#HIGH SPIIDBuf
005D F583              MOV     DPH,A
005F EF                MOV     A,R7
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 27  

0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0061 900000      E     MOV     DPTR,#SPIIndex
0064 E0                MOVX    A,@DPTR
0065 04                INC     A
0066 F0                MOVX    @DPTR,A
0067 E0                MOVX    A,@DPTR
0068 B404E2            CJNE    A,#04H,?C0041
006B         ?C0042:
                                           ; SOURCE LINE # 223
006B 900000      E     MOV     DPTR,#SPIIDBuf
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#SPIID
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
0073 900000      E     MOV     DPTR,#ECINDAR1
0076 74FE              MOV     A,#0FEH
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0079 900000      E     MOV     DPTR,#ECINDDR
007C 04                INC     A
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
007E 900000      E     MOV     DPTR,#ECINDAR1
0081 74FD              MOV     A,#0FDH
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
0084 900000      E     MOV     DPTR,#ECINDDR
0087 7405              MOV     A,#05H
0089 F0                MOVX    @DPTR,A
008A         ?C0044:
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
008A 900000      E     MOV     DPTR,#ECINDDR
008D E0                MOVX    A,@DPTR
008E 20E0F9            JB      ACC.0,?C0044
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0091         ?C0045:
                                           ; SOURCE LINE # 237
0091 E4                CLR     A
0092 900000      E     MOV     DPTR,#ECINDAR3
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
0096 900000      E     MOV     DPTR,#ECINDAR2
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
009A 22                RET     
             ; FUNCTION SPI_Read_ID (END)

             ; FUNCTION SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0008 900000      E     MOV     DPTR,#ECINDAR2
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 28  

000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0048:
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0048
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
0031         ?C0049:
                                           ; SOURCE LINE # 263
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0042 900000      E     MOV     DPTR,#ECINDDR
0045 74AB              MOV     A,#0ABH
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0048 E4                CLR     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
004C 900000      E     MOV     DPTR,#SPIIndex
004F F0                MOVX    @DPTR,A
0050         ?C0051:
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 29  

0050 900000      E     MOV     DPTR,#ECINDDR
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      E     MOV     DPTR,#SPIIndex
0058 E0                MOVX    A,@DPTR
0059 2400        E     ADD     A,#LOW SPIIDBuf
005B F582              MOV     DPL,A
005D E4                CLR     A
005E 3400        E     ADDC    A,#HIGH SPIIDBuf
0060 F583              MOV     DPH,A
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0064 900000      E     MOV     DPTR,#SPIIndex
0067 E0                MOVX    A,@DPTR
0068 04                INC     A
0069 F0                MOVX    @DPTR,A
006A E0                MOVX    A,@DPTR
006B B404E2            CJNE    A,#04H,?C0051
006E         ?C0052:
                                           ; SOURCE LINE # 275
006E 900000      E     MOV     DPTR,#SPIIDBuf
0071 E0                MOVX    A,@DPTR
0072 900000      E     MOV     DPTR,#SPIID
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0076 900000      E     MOV     DPTR,#ECINDAR1
0079 74FE              MOV     A,#0FEH
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
007C 900000      E     MOV     DPTR,#ECINDDR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
0081 900000      E     MOV     DPTR,#ECINDAR1
0084 74FD              MOV     A,#0FDH
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
0087 900000      E     MOV     DPTR,#ECINDDR
008A 7405              MOV     A,#05H
008C F0                MOVX    @DPTR,A
008D         ?C0054:
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
008D 900000      E     MOV     DPTR,#ECINDDR
0090 E0                MOVX    A,@DPTR
0091 20E0F9            JB      ACC.0,?C0054
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0094         ?C0055:
                                           ; SOURCE LINE # 289
0094 E4                CLR     A
0095 900000      E     MOV     DPTR,#ECINDAR3
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0099 900000      E     MOV     DPTR,#ECINDAR2
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
009D 22                RET     
             ; FUNCTION SPI_Read_ID_CmdAB (END)
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 30  


             ; FUNCTION SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0058:
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 5403              ANL     A,#03H
0030 FF                MOV     R7,A
0031 BF02F6            CJNE    R7,#02H,?C0058
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0034         ?C0059:
                                           ; SOURCE LINE # 314
0034 900000      E     MOV     DPTR,#ECINDAR1
0037 74FE              MOV     A,#0FEH
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
003A 900000      E     MOV     DPTR,#ECINDDR
003D 04                INC     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
003F 900000      E     MOV     DPTR,#ECINDAR1
0042 74FD              MOV     A,#0FDH
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0045 900000      E     MOV     DPTR,#SPIAEraseCmd
0048 E0                MOVX    A,@DPTR
0049 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 31  

004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
004D E4                CLR     A
004E 900000      E     MOV     DPTR,#SPIIndex
0051 F0                MOVX    @DPTR,A
0052         ?C0061:
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0052 900000      E     MOV     DPTR,#SPIIndex
0055 E0                MOVX    A,@DPTR
0056 2400        E     ADD     A,#LOW SPIAddrCycle
0058 F582              MOV     DPL,A
005A E4                CLR     A
005B 3400        E     ADDC    A,#HIGH SPIAddrCycle
005D F583              MOV     DPH,A
005F E0                MOVX    A,@DPTR
0060 900000      E     MOV     DPTR,#ECINDDR
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0064 900000      E     MOV     DPTR,#SPIIndex
0067 E0                MOVX    A,@DPTR
0068 04                INC     A
0069 F0                MOVX    @DPTR,A
006A E0                MOVX    A,@DPTR
006B B403E4            CJNE    A,#03H,?C0061
006E         ?C0062:
                                           ; SOURCE LINE # 323
006E 900000      E     MOV     DPTR,#ECINDAR1
0071 74FE              MOV     A,#0FEH
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0074 900000      E     MOV     DPTR,#ECINDDR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0079 900000      E     MOV     DPTR,#ECINDAR1
007C 74FD              MOV     A,#0FDH
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
007F 900000      E     MOV     DPTR,#ECINDDR
0082 7405              MOV     A,#05H
0084 F0                MOVX    @DPTR,A
0085         ?C0064:
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0085 900000      E     MOV     DPTR,#ECINDDR
0088 E0                MOVX    A,@DPTR
0089 20E0F9            JB      ACC.0,?C0064
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
008C         ?C0065:
                                           ; SOURCE LINE # 336
008C E4                CLR     A
008D 900000      E     MOV     DPTR,#ECINDAR3
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
0091 900000      E     MOV     DPTR,#ECINDAR2
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0095 22                RET     
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 32  

             ; FUNCTION SPI_Erase (END)

             ; FUNCTION SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0068:
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0068
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0031         ?C0069:
                                           ; SOURCE LINE # 361
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0042 900000      E     MOV     DPTR,#ECINDDR
0045 7406              MOV     A,#06H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 33  

0048 900000      E     MOV     DPTR,#SPIID
004B E0                MOVX    A,@DPTR
004C B4BF17            CJNE    A,#0BFH,?C0071
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
004F 900000      E     MOV     DPTR,#ECINDAR1
0052 74FE              MOV     A,#0FEH
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0055 900000      E     MOV     DPTR,#ECINDDR
0058 04                INC     A
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
005A 900000      E     MOV     DPTR,#ECINDAR1
005D 74FD              MOV     A,#0FDH
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0060 900000      E     MOV     DPTR,#ECINDDR
0063 7450              MOV     A,#050H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0066         ?C0071:
                                           ; SOURCE LINE # 374
0066 900000      E     MOV     DPTR,#ECINDAR1
0069 74FE              MOV     A,#0FEH
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
006C 900000      E     MOV     DPTR,#ECINDDR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0071 900000      E     MOV     DPTR,#ECINDAR1
0074 74FD              MOV     A,#0FDH
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0077 900000      E     MOV     DPTR,#ECINDDR
007A 7405              MOV     A,#05H
007C F0                MOVX    @DPTR,A
007D         ?C0072:
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
007D 900000      E     MOV     DPTR,#ECINDDR
0080 E0                MOVX    A,@DPTR
0081 5403              ANL     A,#03H
0083 FF                MOV     R7,A
0084 BF02F6            CJNE    R7,#02H,?C0072
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
0087         ?C0073:
                                           ; SOURCE LINE # 386
0087 E4                CLR     A
0088 900000      E     MOV     DPTR,#ECINDAR3
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
008C 900000      E     MOV     DPTR,#ECINDAR2
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
0090 22                RET     
             ; FUNCTION SPI_Write_Enable (END)

C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 34  

             ; FUNCTION SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0076:
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0076
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
0031         ?C0077:
                                           ; SOURCE LINE # 411
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 412
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
0042 900000      E     MOV     DPTR,#ECINDDR
0045 7404              MOV     A,#04H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0048 900000      E     MOV     DPTR,#ECINDAR1
004B 74FE              MOV     A,#0FEH
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 35  

004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
004E 900000      E     MOV     DPTR,#ECINDDR
0051 04                INC     A
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
0053 900000      E     MOV     DPTR,#ECINDAR1
0056 74FD              MOV     A,#0FDH
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0059 900000      E     MOV     DPTR,#ECINDDR
005C 7405              MOV     A,#05H
005E F0                MOVX    @DPTR,A
005F         ?C0079:
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
005F 900000      E     MOV     DPTR,#ECINDDR
0062 E0                MOVX    A,@DPTR
0063 5403              ANL     A,#03H
0065 70F8              JNZ     ?C0079
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
0067         ?C0080:
                                           ; SOURCE LINE # 428
0067 E4                CLR     A
0068 900000      E     MOV     DPTR,#ECINDAR3
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
006C 900000      E     MOV     DPTR,#ECINDAR2
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0070 22                RET     
             ; FUNCTION SPI_Write_Disable (END)

             ; FUNCTION Other_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
001E 900000      E     MOV     DPTR,#ECINDAR1
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 36  

0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0083:
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0083
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
0031         ?C0084:
                                           ; SOURCE LINE # 453
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0042 900000      E     MOV     DPTR,#ECINDDR
0045 7402              MOV     A,#02H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
0048 900000      E     MOV     DPTR,#SPIAddrCycle
004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#ECINDDR
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
0050 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0053 E0                MOVX    A,@DPTR
0054 900000      E     MOV     DPTR,#ECINDDR
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0058 900000      E     MOV     DPTR,#SPIAddrCycle+02H
005B E0                MOVX    A,@DPTR
005C 900000      E     MOV     DPTR,#ECINDDR
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0060 E4                CLR     A
0061 900000      E     MOV     DPTR,#SPIIndex
0064 F0                MOVX    @DPTR,A
0065         ?C0088:
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0065 900000      E     MOV     DPTR,#SPIDataPointer
0068 E0                MOVX    A,@DPTR
0069 FE                MOV     R6,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C F582              MOV     DPL,A
006E 8E83              MOV     DPH,R6
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 37  

0070 E0                MOVX    A,@DPTR
0071 900000      E     MOV     DPTR,#ECINDDR
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
0075 900000      E     MOV     DPTR,#SPIIndex
0078 E0                MOVX    A,@DPTR
0079 04                INC     A
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
007B 90009C            MOV     DPTR,#09CH
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
0081 900000      E     MOV     DPTR,#SPIIndex
0084 E0                MOVX    A,@DPTR
0085 70DE              JNZ     ?C0088
                                           ; SOURCE LINE # 470
0087 900000      E     MOV     DPTR,#ECINDAR1
008A 74FE              MOV     A,#0FEH
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
008D 900000      E     MOV     DPTR,#ECINDDR
0090 04                INC     A
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
0092 900000      E     MOV     DPTR,#ECINDAR1
0095 74FD              MOV     A,#0FDH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
0098 900000      E     MOV     DPTR,#ECINDDR
009B 7405              MOV     A,#05H
009D F0                MOVX    @DPTR,A
009E         ?C0089:
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
009E 900000      E     MOV     DPTR,#ECINDDR
00A1 E0                MOVX    A,@DPTR
00A2 20E0F9            JB      ACC.0,?C0089
                                           ; SOURCE LINE # 477
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
00A5         ?C0090:
                                           ; SOURCE LINE # 482
00A5 E4                CLR     A
00A6 900000      E     MOV     DPTR,#ECINDAR3
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
00AA 900000      E     MOV     DPTR,#ECINDAR2
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
00AE 22                RET     
             ; FUNCTION Other_SPI_Write_256Bytes (END)

             ; FUNCTION SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 38  

0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0093:
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0093
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0031         ?C0094:
                                           ; SOURCE LINE # 507
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
0042 900000      E     MOV     DPTR,#ECINDDR
0045 74AD              MOV     A,#0ADH
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
0048 900000      E     MOV     DPTR,#SPIAddrCycle
004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#ECINDDR
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
0050 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0053 E0                MOVX    A,@DPTR
0054 900000      E     MOV     DPTR,#ECINDDR
0057 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 39  

                                           ; SOURCE LINE # 514
0058 900000      E     MOV     DPTR,#SPIAddrCycle+02H
005B E0                MOVX    A,@DPTR
005C 900000      E     MOV     DPTR,#ECINDDR
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
0060 E4                CLR     A
0061 900000      E     MOV     DPTR,#SPIIndex
0064 F0                MOVX    @DPTR,A
0065         ?C0098:
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0065 900000      E     MOV     DPTR,#SPIDataPointer
0068 E0                MOVX    A,@DPTR
0069 FE                MOV     R6,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C F582              MOV     DPL,A
006E 8E83              MOV     DPH,R6
0070 E0                MOVX    A,@DPTR
0071 900000      E     MOV     DPTR,#ECINDDR
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
0075 900000      E     MOV     DPTR,#SPIIndex
0078 E0                MOVX    A,@DPTR
0079 04                INC     A
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
007B 90009C            MOV     DPTR,#09CH
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
0081 900000      E     MOV     DPTR,#SPIIndex
0084 E0                MOVX    A,@DPTR
0085 20E03B            JB      ACC.0,?C0096
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
0088 900000      E     MOV     DPTR,#ECINDAR1
008B 74FE              MOV     A,#0FEH
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
008E 900000      E     MOV     DPTR,#ECINDDR
0091 04                INC     A
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
0093 900000      E     MOV     DPTR,#ECINDAR1
0096 74FD              MOV     A,#0FDH
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0099 900000      E     MOV     DPTR,#ECINDDR
009C 7405              MOV     A,#05H
009E F0                MOVX    @DPTR,A
009F         ?C0100:
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
009F 900000      E     MOV     DPTR,#ECINDDR
00A2 E0                MOVX    A,@DPTR
00A3 20E0F9            JB      ACC.0,?C0100
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 40  

                                           ; SOURCE LINE # 534
00A6         ?C0101:
                                           ; SOURCE LINE # 537
00A6 900000      E     MOV     DPTR,#SPIIndex
00A9 E0                MOVX    A,@DPTR
00AA 6017              JZ      ?C0096
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
00AC 900000      E     MOV     DPTR,#ECINDAR1
00AF 74FE              MOV     A,#0FEH
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
00B2 900000      E     MOV     DPTR,#ECINDDR
00B5 04                INC     A
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
00B7 900000      E     MOV     DPTR,#ECINDAR1
00BA 74FD              MOV     A,#0FDH
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
00BD 900000      E     MOV     DPTR,#ECINDDR
00C0 74AD              MOV     A,#0ADH
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
00C3         ?C0096:
00C3 900000      E     MOV     DPTR,#SPIIndex
00C6 E0                MOVX    A,@DPTR
00C7 709C              JNZ     ?C0098
                                           ; SOURCE LINE # 547
00C9 900000      E     MOV     DPTR,#ECINDAR1
00CC 74FE              MOV     A,#0FEH
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
00CF 900000      E     MOV     DPTR,#ECINDDR
00D2 04                INC     A
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
00D4 900000      E     MOV     DPTR,#ECINDAR1
00D7 74FD              MOV     A,#0FDH
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
00DA 900000      E     MOV     DPTR,#ECINDDR
00DD 7404              MOV     A,#04H
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
00E0 E4                CLR     A
00E1 900000      E     MOV     DPTR,#WNCKR
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
00E8 900000      E     MOV     DPTR,#ECINDAR3
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
00EC 900000      E     MOV     DPTR,#ECINDAR2
00EF F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 41  

                                           ; SOURCE LINE # 559
00F0 22                RET     
             ; FUNCTION SST_SPI_Write_256Bytes (END)

             ; FUNCTION Old_SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0105:
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0105
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
0031         ?C0106:
                                           ; SOURCE LINE # 582
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
0042 900000      E     MOV     DPTR,#ECINDDR
0045 74AF              MOV     A,#0AFH
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 42  

0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
0048 900000      E     MOV     DPTR,#SPIAddrCycle
004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#ECINDDR
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0050 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0053 E0                MOVX    A,@DPTR
0054 900000      E     MOV     DPTR,#ECINDDR
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
0058 900000      E     MOV     DPTR,#SPIAddrCycle+02H
005B E0                MOVX    A,@DPTR
005C 900000      E     MOV     DPTR,#ECINDDR
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
0060 E4                CLR     A
0061 900000      E     MOV     DPTR,#SPIIndex
0064 F0                MOVX    @DPTR,A
0065         ?C0110:
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
0065 900000      E     MOV     DPTR,#SPIDataPointer
0068 E0                MOVX    A,@DPTR
0069 FE                MOV     R6,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C F582              MOV     DPL,A
006E 8E83              MOV     DPH,R6
0070 E0                MOVX    A,@DPTR
0071 900000      E     MOV     DPTR,#ECINDDR
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
0075 900000      E     MOV     DPTR,#SPIIndex
0078 E0                MOVX    A,@DPTR
0079 04                INC     A
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 596
007B 90009C            MOV     DPTR,#09CH
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
0081 900000      E     MOV     DPTR,#ECINDAR1
0084 74FE              MOV     A,#0FEH
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
0087 900000      E     MOV     DPTR,#ECINDDR
008A 04                INC     A
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
008C 900000      E     MOV     DPTR,#ECINDAR1
008F 74FD              MOV     A,#0FDH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
0092 900000      E     MOV     DPTR,#ECINDDR
0095 7405              MOV     A,#05H
0097 F0                MOVX    @DPTR,A
0098         ?C0111:
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 43  

                                           ; SOURCE LINE # 604
0098 900000      E     MOV     DPTR,#ECINDDR
009B E0                MOVX    A,@DPTR
009C 20E0F9            JB      ACC.0,?C0111
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
009F         ?C0112:
                                           ; SOURCE LINE # 610
009F 900000      E     MOV     DPTR,#SPIIndex
00A2 E0                MOVX    A,@DPTR
00A3 6017              JZ      ?C0108
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
00A5 900000      E     MOV     DPTR,#ECINDAR1
00A8 74FE              MOV     A,#0FEH
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
00AB 900000      E     MOV     DPTR,#ECINDDR
00AE 04                INC     A
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
00B0 900000      E     MOV     DPTR,#ECINDAR1
00B3 74FD              MOV     A,#0FDH
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 615
00B6 900000      E     MOV     DPTR,#ECINDDR
00B9 74AF              MOV     A,#0AFH
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 617
00BC         ?C0108:
00BC 900000      E     MOV     DPTR,#SPIIndex
00BF E0                MOVX    A,@DPTR
00C0 70A3              JNZ     ?C0110
                                           ; SOURCE LINE # 619
00C2 900000      E     MOV     DPTR,#ECINDAR1
00C5 74FE              MOV     A,#0FEH
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
00C8 900000      E     MOV     DPTR,#ECINDDR
00CB 04                INC     A
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
00CD 900000      E     MOV     DPTR,#ECINDAR1
00D0 74FD              MOV     A,#0FDH
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 622
00D3 900000      E     MOV     DPTR,#ECINDDR
00D6 7404              MOV     A,#04H
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
00D9 E4                CLR     A
00DA 900000      E     MOV     DPTR,#WNCKR
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 627
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 628
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 44  

00E1 900000      E     MOV     DPTR,#ECINDAR3
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
00E5 900000      E     MOV     DPTR,#ECINDAR2
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
00E9 22                RET     
             ; FUNCTION Old_SST_SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
                                           ; SOURCE LINE # 650
0000 900000      E     MOV     DPTR,#SPIID
0003 E0                MOVX    A,@DPTR
0004 B4BF13            CJNE    A,#0BFH,?C0116
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
0007 900000      E     MOV     DPTR,#SSTDeviceID
000A E0                MOVX    A,@DPTR
000B B40106            CJNE    A,#01H,?C0117
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
000E 7E00        R     MOV     R6,#HIGH Old_SST_SPI_Write_256Bytes
0010 7F00        R     MOV     R7,#LOW Old_SST_SPI_Write_256Bytes
                                           ; SOURCE LINE # 655
0012 800A              SJMP    ?C0175
0014         ?C0117:
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
0014 7E00        R     MOV     R6,#HIGH SST_SPI_Write_256Bytes
0016 7F00        R     MOV     R7,#LOW SST_SPI_Write_256Bytes
0018         ?C0174:
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
0018 8004              SJMP    ?C0175
001A         ?C0116:
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
001A 7E00        R     MOV     R6,#HIGH Other_SPI_Write_256Bytes
001C 7F00        R     MOV     R7,#LOW Other_SPI_Write_256Bytes
001E         ?C0175:
001E 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 665
0021         ?C0120:
0021 22                RET     
             ; FUNCTION SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
0000 900000      E     MOV     DPTR,#EC_Indirect_Selection
0003 E0                MOVX    A,@DPTR
0004 900000      E     MOV     DPTR,#ECINDAR3
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 674
0008 900000      E     MOV     DPTR,#ECINDAR2
000B 74FF              MOV     A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 45  

000E E4                CLR     A
000F 900000      E     MOV     DPTR,#ECINDAR0
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 677
0013 900000      E     MOV     DPTR,#ECINDAR1
0016 74FE              MOV     A,#0FEH
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0019 900000      E     MOV     DPTR,#ECINDDR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
001E 900000      E     MOV     DPTR,#ECINDAR1
0021 74FD              MOV     A,#0FDH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
0024 900000      E     MOV     DPTR,#ECINDDR
0027 7405              MOV     A,#05H
0029 F0                MOVX    @DPTR,A
002A         ?C0121:
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
002A 900000      E     MOV     DPTR,#ECINDDR
002D E0                MOVX    A,@DPTR
002E 20E0F9            JB      ACC.0,?C0121
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
0031         ?C0122:
                                           ; SOURCE LINE # 689
0031 900000      E     MOV     DPTR,#ECINDAR1
0034 74FE              MOV     A,#0FEH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
0037 900000      E     MOV     DPTR,#ECINDDR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
003C 900000      E     MOV     DPTR,#ECINDAR1
003F 74FD              MOV     A,#0FDH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 692
0042 900000      E     MOV     DPTR,#ECINDDR
0045 740B              MOV     A,#0BH
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
0048 900000      E     MOV     DPTR,#SPIAddrCycle
004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#ECINDDR
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 695
0050 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0053 E0                MOVX    A,@DPTR
0054 900000      E     MOV     DPTR,#ECINDDR
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 696
0058 900000      E     MOV     DPTR,#SPIAddrCycle+02H
005B E0                MOVX    A,@DPTR
005C 900000      E     MOV     DPTR,#ECINDDR
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 697
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 46  

0060 E4                CLR     A
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 699
0062 900000      E     MOV     DPTR,#SPIIndex
0065 F0                MOVX    @DPTR,A
0066         ?C0126:
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 702
0066 900000      E     MOV     DPTR,#ECINDDR
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B 900000      E     MOV     DPTR,#SPIDataPointer
006E E0                MOVX    A,@DPTR
006F FC                MOV     R4,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 F582              MOV     DPL,A
0074 8C83              MOV     DPH,R4
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 703
0078 900000      E     MOV     DPTR,#SPIIndex
007B E0                MOVX    A,@DPTR
007C 04                INC     A
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
007E 90009C            MOV     DPTR,#09CH
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
0084 900000      E     MOV     DPTR,#SPIIndex
0087 E0                MOVX    A,@DPTR
0088 70DC              JNZ     ?C0126
                                           ; SOURCE LINE # 707
008A 900000      E     MOV     DPTR,#ECINDAR1
008D 74FE              MOV     A,#0FEH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 708
0090 900000      E     MOV     DPTR,#ECINDDR
0093 04                INC     A
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
0095 900000      E     MOV     DPTR,#ECINDAR1
0098 74FD              MOV     A,#0FDH
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
009B 900000      E     MOV     DPTR,#ECINDDR
009E 7405              MOV     A,#05H
00A0 F0                MOVX    @DPTR,A
00A1         ?C0127:
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
00A1 900000      E     MOV     DPTR,#ECINDDR
00A4 E0                MOVX    A,@DPTR
00A5 20E0F9            JB      ACC.0,?C0127
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
00A8         ?C0128:
                                           ; SOURCE LINE # 719
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 47  

00A8 E4                CLR     A
00A9 900000      E     MOV     DPTR,#ECINDAR3
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 720
00AD 900000      E     MOV     DPTR,#ECINDAR2
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
00B1 22                RET     
             ; FUNCTION SPI_Read_256Bytes (END)

             ; FUNCTION Eflash_Write_1Byte (BEGIN)
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 744F              MOV     A,#04FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 730
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 731
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 732
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 734
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0131:
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0131
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 740
002F         ?C0132:
                                           ; SOURCE LINE # 742
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 743
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 744
003A 900000      E     MOV     DPTR,#ECINDAR1
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 48  

003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 745
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7402              MOV     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 747
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 748
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 749
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 750
0063 900000      E     MOV     DPTR,#SPIIDBuf
0066 E0                MOVX    A,@DPTR
0067 900000      E     MOV     DPTR,#ECINDDR
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 751
006B 900000      E     MOV     DPTR,#ECINDAR1
006E 74FE              MOV     A,#0FEH
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 752
0071 900000      E     MOV     DPTR,#ECINDDR
0074 04                INC     A
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
0076 900000      E     MOV     DPTR,#ECINDAR1
0079 74FD              MOV     A,#0FDH
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 754
007C 900000      E     MOV     DPTR,#ECINDDR
007F 7405              MOV     A,#05H
0081 F0                MOVX    @DPTR,A
0082         ?C0134:
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 757
0082 900000      E     MOV     DPTR,#ECINDDR
0085 E0                MOVX    A,@DPTR
0086 20E0F9            JB      ACC.0,?C0134
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 760
0089         ?C0135:
                                           ; SOURCE LINE # 762
0089 E4                CLR     A
008A 900000      E     MOV     DPTR,#ECINDAR3
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 49  

008E 900000      E     MOV     DPTR,#ECINDAR2
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
0092 22                RET     
             ; FUNCTION Eflash_Write_1Byte (END)

             ; FUNCTION _LoadSPIFucnToRam (BEGIN)
                                           ; SOURCE LINE # 770
;---- Variable 'funcpoint' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0000 7800        E     MOV     R0,#LOW Tmp_XPntr
0002 7606              MOV     @R0,#06H
0004 08                INC     R0
0005 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 773
0007 8E00        E     MOV     Tmp_code_pointer,R6
0009 8F00        E     MOV     Tmp_code_pointer+01H,R7
                                           ; SOURCE LINE # 775
000B E4                CLR     A
000C F500        E     MOV     ITempB01,A
000E         ?C0140:
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
000E 850082      E     MOV     DPL,Tmp_code_pointer+01H
0011 850083      E     MOV     DPH,Tmp_code_pointer
0014 E4                CLR     A
0015 93                MOVC    A,@A+DPTR
0016 FF                MOV     R7,A
0017 7800        E     MOV     R0,#LOW Tmp_XPntr
0019 E6                MOV     A,@R0
001A FC                MOV     R4,A
001B 08                INC     R0
001C E6                MOV     A,@R0
001D F582              MOV     DPL,A
001F 8C83              MOV     DPH,R4
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
0023 06                INC     @R0
0024 E6                MOV     A,@R0
0025 18                DEC     R0
0026 7001              JNZ     ?C0169
0028 06                INC     @R0
0029         ?C0169:
                                           ; SOURCE LINE # 780
0029 0500        E     INC     Tmp_code_pointer+01H
002B E500        E     MOV     A,Tmp_code_pointer+01H
002D 7002              JNZ     ?C0170
002F 0500        E     INC     Tmp_code_pointer
0031         ?C0170:
                                           ; SOURCE LINE # 781
0031 0500        E     INC     ITempB01
                                           ; SOURCE LINE # 782
0033 E500        E     MOV     A,ITempB01
0035 70D7              JNZ     ?C0140
                                           ; SOURCE LINE # 783
0037 22                RET     
             ; FUNCTION _LoadSPIFucnToRam (END)

             ; FUNCTION ITE_Flash_Utility (BEGIN)
                                           ; SOURCE LINE # 789
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 50  

                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 791
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 792
0003 7E00        R     MOV     R6,#HIGH FlashECCode
0005 7F00        R     MOV     R7,#LOW FlashECCode
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 793
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 794
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 795
0014 22                RET     
             ; FUNCTION ITE_Flash_Utility (END)

             ; FUNCTION _Do_SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 804
;---- Variable 'statusvalue' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
0000 900000      E     MOV     DPTR,#SPIWriteStatus
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
0005 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 809
0008 7E00        R     MOV     R6,#HIGH SPI_Write_Status
000A 7F00        R     MOV     R7,#LOW SPI_Write_Status
000C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 810
000F 900000      E     MOV     DPTR,#FBCFG
0012 E0                MOVX    A,@DPTR
0013 4480              ORL     A,#080H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
0016 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 812
0019 900000      E     MOV     DPTR,#FBCFG
001C E0                MOVX    A,@DPTR
001D 547F              ANL     A,#07FH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 813
0020 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 814
0023 22                RET     
             ; FUNCTION _Do_SPI_Write_Status (END)

             ; FUNCTION Do_SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 824
0003 7E00        R     MOV     R6,#HIGH SPI_Read_Status
0005 7F00        R     MOV     R7,#LOW SPI_Read_Status
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 825
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 51  

000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 827
0014 900000      E     MOV     DPTR,#FBCFG
0017 E0                MOVX    A,@DPTR
0018 547F              ANL     A,#07FH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 828
001B 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 829
001E 22                RET     
             ; FUNCTION Do_SPI_Read_Status (END)

             ; FUNCTION Do_SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 838
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 839
0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 840
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 841
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 842
0014 900000      E     MOV     DPTR,#FBCFG
0017 E0                MOVX    A,@DPTR
0018 547F              ANL     A,#07FH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 843
001B 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 844
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID (END)

             ; FUNCTION Do_SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 853
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 854
0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID_CmdAB
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID_CmdAB
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 855
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 856
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 857
0014 900000      E     MOV     DPTR,#FBCFG
0017 E0                MOVX    A,@DPTR
0018 547F              ANL     A,#07FH
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 52  

001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
001B 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 859
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID_CmdAB (END)

             ; FUNCTION _Do_SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 870
;---- Variable 'EraseCmd' assigned to Register 'R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 871
                                           ; SOURCE LINE # 872
0000 900000      E     MOV     DPTR,#SPIAEraseCmd
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
0005 900000      E     MOV     DPTR,#SPIAddrCycle
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
000A A3                INC     DPTR
000B EB                MOV     A,R3
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
000D 900000      R     MOV     DPTR,#Addr0
0010 E0                MOVX    A,@DPTR
0011 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 877
0015 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 878
0018 7E00        R     MOV     R6,#HIGH SPI_Erase
001A 7F00        R     MOV     R7,#LOW SPI_Erase
001C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 879
001F 900000      E     MOV     DPTR,#FBCFG
0022 E0                MOVX    A,@DPTR
0023 4480              ORL     A,#080H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 880
0026 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 881
0029 900000      E     MOV     DPTR,#FBCFG
002C E0                MOVX    A,@DPTR
002D 547F              ANL     A,#07FH
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 882
0030 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 883
0033 22                RET     
             ; FUNCTION _Do_SPI_Erase (END)

             ; FUNCTION _Do_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 893
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 895
0000 900000      E     MOV     DPTR,#SPIDataPointer
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 53  

0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 897
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 898
0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 900
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 901
001B 120000      R     LCALL   SPI_Write_256Bytes
                                           ; SOURCE LINE # 902
001E 900000      E     MOV     DPTR,#FBCFG
0021 E0                MOVX    A,@DPTR
0022 4480              ORL     A,#080H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 903
0025 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 904
0028 900000      E     MOV     DPTR,#FBCFG
002B E0                MOVX    A,@DPTR
002C 547F              ANL     A,#07FH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
002F 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 906
0032 22                RET     
             ; FUNCTION _Do_SPI_Write_256Bytes (END)

             ; FUNCTION _Do_SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 916
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 917
                                           ; SOURCE LINE # 918
0000 900000      E     MOV     DPTR,#SPIDataPointer
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 919
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 921
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 54  

0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 923
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 924
001B 7E00        R     MOV     R6,#HIGH SPI_Read_256Bytes
001D 7F00        R     MOV     R7,#LOW SPI_Read_256Bytes
001F 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 925
0022 900000      E     MOV     DPTR,#FBCFG
0025 E0                MOVX    A,@DPTR
0026 4480              ORL     A,#080H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 926
0029 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 927
002C 900000      E     MOV     DPTR,#FBCFG
002F E0                MOVX    A,@DPTR
0030 547F              ANL     A,#07FH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 928
0033 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 929
0036 22                RET     
             ; FUNCTION _Do_SPI_Read_256Bytes (END)

             ; FUNCTION Do_SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 937
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 938
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Enable
0005 7F00        R     MOV     R7,#LOW SPI_Write_Enable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 939
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 940
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 941
0014 900000      E     MOV     DPTR,#FBCFG
0017 E0                MOVX    A,@DPTR
0018 547F              ANL     A,#07FH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 942
001B 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 943
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Enable (END)

             ; FUNCTION Do_SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 949
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 952
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Disable
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 55  

0005 7F00        R     MOV     R7,#LOW SPI_Write_Disable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 953
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 954
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 955
0014 900000      E     MOV     DPTR,#FBCFG
0017 E0                MOVX    A,@DPTR
0018 547F              ANL     A,#07FH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
001B 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 957
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Disable (END)

             ; FUNCTION _Do_Eflash_Write_1Byte (BEGIN)
                                           ; SOURCE LINE # 963
;---- Variable 'OneByte' assigned to Register 'R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 965
0000 900000      E     MOV     DPTR,#SPIIDBuf
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 966
0005 900000      E     MOV     DPTR,#SPIAddrCycle
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
000A A3                INC     DPTR
000B EB                MOV     A,R3
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 968
000D 900000      R     MOV     DPTR,#Addr0
0010 E0                MOVX    A,@DPTR
0011 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 969
0015 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 970
0018 7E00        R     MOV     R6,#HIGH SPI_Write_Enable
001A 7F00        R     MOV     R7,#LOW SPI_Write_Enable
001C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 971
001F 900000      E     MOV     DPTR,#FBCFG
0022 E0                MOVX    A,@DPTR
0023 4480              ORL     A,#080H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 972
0026 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 973
0029 900000      E     MOV     DPTR,#FBCFG
002C E0                MOVX    A,@DPTR
002D 547F              ANL     A,#07FH
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 974
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 56  

0030 7E00        R     MOV     R6,#HIGH Eflash_Write_1Byte
0032 7F00        R     MOV     R7,#LOW Eflash_Write_1Byte
0034 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 975
0037 900000      E     MOV     DPTR,#FBCFG
003A E0                MOVX    A,@DPTR
003B 4480              ORL     A,#080H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
003E 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 977
0041 900000      E     MOV     DPTR,#FBCFG
0044 E0                MOVX    A,@DPTR
0045 547F              ANL     A,#07FH
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 978
0048 7E00        R     MOV     R6,#HIGH SPI_Write_Disable
004A 7F00        R     MOV     R7,#LOW SPI_Write_Disable
004C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 979
004F 900000      E     MOV     DPTR,#FBCFG
0052 E0                MOVX    A,@DPTR
0053 4480              ORL     A,#080H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
0056 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 981
0059 900000      E     MOV     DPTR,#FBCFG
005C E0                MOVX    A,@DPTR
005D 547F              ANL     A,#07FH
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 982
0060 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 983
0063 22                RET     
             ; FUNCTION _Do_Eflash_Write_1Byte (END)

             ; FUNCTION _ECIndirectFastRead (BEGIN)
                                           ; SOURCE LINE # 1001
;---- Variable 'add2' assigned to Register 'R1' ----
0000 C9                XCH     A,R1
0001 EF                MOV     A,R7
0002 C9                XCH     A,R1
;---- Variable 'add0' assigned to Register 'R3' ----
;---- Variable 'add1' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1006
0003 900000      E     MOV     DPTR,#ECINDAR3
0006 E0                MOVX    A,@DPTR
0007 900000      R     MOV     DPTR,#ECINDAR3_Store
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1007
000B 900000      E     MOV     DPTR,#FLHCTRL3R
000E E0                MOVX    A,@DPTR
000F 900000      R     MOV     DPTR,#FLHCTRL3R_Store
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1009
0013 900000      R     MOV     DPTR,#selection
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 6007              JZ      ?C0154
001A 6401              XRL     A,#01H
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 57  

001C 6003              JZ      $ + 5H
001E 020000      R     LJMP    ?C0161
0021         ?C0154:
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1011
0021 EF                MOV     A,R7
0022 7008              JNZ     ?C0155
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
0024 900000      E     MOV     DPTR,#ECINDAR3
0027 7440              MOV     A,#040H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1014
002A 800C              SJMP    ?C0156
002C         ?C0155:
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
002C E4                CLR     A
002D 900000      E     MOV     DPTR,#ECINDAR3
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1018
0031 900000      E     MOV     DPTR,#FLHCTRL3R
0034 E0                MOVX    A,@DPTR
0035 54FE              ANL     A,#0FEH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1019
0038         ?C0156:
                                           ; SOURCE LINE # 1021
0038 900000      E     MOV     DPTR,#ECINDAR2
003B E9                MOV     A,R1
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1022
003D 900000      E     MOV     DPTR,#ECINDAR1
0040 ED                MOV     A,R5
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
0042 900000      E     MOV     DPTR,#ECINDAR0
0045 EB                MOV     A,R3
0046 F0                MOVX    @DPTR,A
0047         ?C0157:
                                           ; SOURCE LINE # 1025
0047 900000      R     MOV     DPTR,#length
004A E0                MOVX    A,@DPTR
004B 7002              JNZ     ?C0171
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F         ?C0171:
004F 6048              JZ      ?C0158
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
0051 900000      E     MOV     DPTR,#ECINDAR2
0054 E9                MOV     A,R1
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
0056 900000      E     MOV     DPTR,#ECINDAR1
0059 ED                MOV     A,R5
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1029
005B 900000      E     MOV     DPTR,#ECINDAR0
005E EB                MOV     A,R3
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1030
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 58  

0060 900000      E     MOV     DPTR,#ECINDDR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 900000      R     MOV     DPTR,#bufferindex
0068 E0                MOVX    A,@DPTR
0069 F8                MOV     R0,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C F582              MOV     DPL,A
006E 8883              MOV     DPH,R0
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1032
0072 0B                INC     R3
0073 EB                MOV     A,R3
0074 7005              JNZ     ?C0159
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1034
0076 0D                INC     R5
0077 ED                MOV     A,R5
0078 7001              JNZ     ?C0159
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
007A 09                INC     R1
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
007B         ?C0159:
                                           ; SOURCE LINE # 1039
007B 900000      R     MOV     DPTR,#bufferindex+01H
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
0081 7006              JNZ     ?C0172
0083 900000      R     MOV     DPTR,#bufferindex
0086 E0                MOVX    A,@DPTR
0087 04                INC     A
0088 F0                MOVX    @DPTR,A
0089         ?C0172:
                                           ; SOURCE LINE # 1040
0089 900000      R     MOV     DPTR,#length+01H
008C E0                MOVX    A,@DPTR
008D 24FF              ADD     A,#0FFH
008F F0                MOVX    @DPTR,A
0090 900000      R     MOV     DPTR,#length
0093 E0                MOVX    A,@DPTR
0094 34FF              ADDC    A,#0FFH
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1041
0097 80AE              SJMP    ?C0157
0099         ?C0158:
                                           ; SOURCE LINE # 1043
0099 900000      R     MOV     DPTR,#ECINDAR3_Store
009C E0                MOVX    A,@DPTR
009D 900000      E     MOV     DPTR,#ECINDAR3
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1044
00A1 900000      R     MOV     DPTR,#FLHCTRL3R_Store
00A4 E0                MOVX    A,@DPTR
00A5 900000      E     MOV     DPTR,#FLHCTRL3R
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1046
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 59  

00A9         ?C0161:
00A9 22                RET     
             ; FUNCTION _ECIndirectFastRead (END)

             ; FUNCTION _Read_Eflash_Byte (BEGIN)
                                           ; SOURCE LINE # 1051
;---- Variable 'FA2' assigned to Register 'R7' ----
;---- Variable 'FA0' assigned to Register 'R3' ----
;---- Variable 'FA1' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1053
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 7440              MOV     A,#040H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1054
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1055
000B 900000      E     MOV     DPTR,#ECINDAR1
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1056
0010 900000      E     MOV     DPTR,#ECINDAR0
0013 EB                MOV     A,R3
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1057
0015 900000      E     MOV     DPTR,#ECINDDR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
                                           ; SOURCE LINE # 1058
001A         ?C0162:
001A 22                RET     
             ; FUNCTION _Read_Eflash_Byte (END)

             ; FUNCTION Do_SW_Mirror (BEGIN)
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
0000 900000      E     MOV     DPTR,#FLHCTRL3R
0003 7418              MOV     A,#018H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1067
0006 D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 1068
0008 D2D9              SETB    WDTEB
000A         ?C0163:
                                           ; SOURCE LINE # 1069
000A 80FE              SJMP    ?C0163
000C 22                RET     
             ; FUNCTION Do_SW_Mirror (END)

             ; FUNCTION _Init_EC_Indirect_Selection (BEGIN)
                                           ; SOURCE LINE # 1083
;---- Variable 'selection' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1084
                                           ; SOURCE LINE # 1085
0000 EF                MOV     A,R7
0001 7007              JNZ     ?C0166
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1087
0003 900000      E     MOV     DPTR,#EC_Indirect_Selection
C51 COMPILER V9.03   CORE_FLASH                                                            02/02/2015 14:30:16 PAGE 60  

0006 744F              MOV     A,#04FH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1088
0009 22                RET     
000A         ?C0166:
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
000A 900000      E     MOV     DPTR,#EC_Indirect_Selection
000D 740F              MOV     A,#0FH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
0010         ?C0168:
0010 22                RET     
             ; FUNCTION _Init_EC_Indirect_Selection (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2959    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      28
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
